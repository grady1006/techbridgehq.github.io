<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TechBridge 技術共筆部落格</title>
  <subtitle>var topics = [&#39;Web前後端&#39;, &#39;行動網路&#39;, &#39;機器人/物聯網&#39;, &#39;數據分析&#39;, &#39;產品設計&#39;, &#39;etc.&#39;]</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.techbridge.cc/"/>
  <updated>2016-06-08T13:08:52.000Z</updated>
  <id>http://blog.techbridge.cc/</id>
  
  <author>
    <name>TechBridge Weekly 技術週刊編輯團隊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ecto 簡介 (1) – cell 與 plasm</title>
    <link href="http://blog.techbridge.cc/2016/06/08/ros-ecto-first/"/>
    <id>http://blog.techbridge.cc/2016/06/08/ros-ecto-first/</id>
    <published>2016-06-08T12:30:13.000Z</published>
    <updated>2016-06-08T13:08:52.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這次想要跟大家介紹 ROS ORK (Object Recognition Kitchen) 這個函式庫實作物體辨識 pipeline 的機制，其背後運用到的一個重要的函式庫叫做 &lt;a href=&quot;http://plasmodic.github.io/ecto/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ecto&lt;/a&gt; ，接下來會介紹 ecto 的基本觀念和用法。但因為我想把內容講解得比較詳細，所以不會只花一篇文章的篇幅就介紹完這個工具，這一篇會講到最基本的 cell 與 plasm，讓大家先有初步的認識，更進階的用法甚至是實例會在之後的文章介紹。&lt;/p&gt;
&lt;h2 id=&quot;ecto-是什麼-amp-為什麼要使用-ecto&quot;&gt;&lt;a href=&quot;#ecto-是什麼-amp-為什麼要使用-ecto&quot; class=&quot;headerlink&quot; title=&quot;ecto 是什麼 &amp;amp; 為什麼要使用 ecto&quot;&gt;&lt;/a&gt;ecto 是什麼 &amp;amp; 為什麼要使用 ecto&lt;/h2&gt;&lt;p&gt;可以把 ecto 想成一個框架，這個框架可以讓你很方便地把程式用 DAG (Directed Acyclic Graph) 的方式來實作，這樣實作的兩大好處在於模組化跟彈性。&lt;/p&gt;
&lt;p&gt;DAG的一個範例圖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/dag.png&quot; alt=&quot;DAG&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先談到模組化，在 ecto 的世界裡，你首先可以用 C++ 或 Python 寫出一個個的 cell ，這個 cell 就是執行一個功能的單位 (所以命名為 cell，細胞的意思)，這種設計的方式讓你在撰寫 cell 的時候，比較不會把好多個功能硬寫在一起，增加了程式的可讀性、也讓後續的擴充彈性變強。&lt;/p&gt;
&lt;p&gt;模組化所衍生出的好處就是彈性，因為你只要抽換某個模組，就可以改變整個程式的行為。&lt;/p&gt;
&lt;p&gt;以 ORK 為例，在撰寫物體辨識的 pipeline 時，假設有三個步驟: (這邊只是為了方便理解舉例，不是真實情況)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;讀取 Kinect 影像&lt;/li&gt;
&lt;li&gt;使用 Linemod 演算法進行 template matching&lt;/li&gt;
&lt;li&gt;將辨識結果輸出&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那用 ecto 實作就會寫成三個 cells，然後再建立一個 ecto 的 plasm，plasm 其實就只是 graph，把寫好的三個cell相連接。 所以，如果我想要實作另一個物體辨識的演算法，我只要改寫第二個 cell 就好，當然有個前提是兩個演算法的 input 和 output 要一致，才不會影響到第一個和第三個 cell。&lt;/p&gt;
&lt;h2 id=&quot;基本中的基本-–-Cells-amp-Plasm-的簡單用法&quot;&gt;&lt;a href=&quot;#基本中的基本-–-Cells-amp-Plasm-的簡單用法&quot; class=&quot;headerlink&quot; title=&quot;基本中的基本 – Cells &amp;amp; Plasm 的簡單用法&quot;&gt;&lt;/a&gt;基本中的基本 – Cells &amp;amp; Plasm 的簡單用法&lt;/h2&gt;&lt;p&gt;為了讓大家有見樹又見林的感覺，我們先看一下 ecto 大致上要怎麼用。最簡單的用法大概就是建立兩個 cell ，再用一個 plasm 將這兩個 cell 串成 graph 。&lt;/p&gt;
&lt;p&gt;現在我們只要先知道要寫一個 cell 需要在裡面定義四個函式: &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;declare_params&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tendrils&amp;amp;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;declare_io&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp;, tendrils&amp;amp;, tendrils&amp;amp;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp;, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp;, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp;, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這四個函式顧名思義就是要定義這個 cell 有哪些參數可以設定、輸入跟輸出是什麼、怎麼設定參數以及 cell 運作時的功能，很符合直覺上的需求。&lt;/p&gt;
&lt;p&gt;那假設我們已經定義了兩個 cell – MyAwesomeCell1 跟 MyAwesomeCell2，ru, 剩下的就是建立一個 Plasm 來串接這兩個 cell 並執行，他的程式碼會像這樣:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ecto&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; my_awesome_cpp_ecto_module&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; my_awesome_python_ecto_module&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# create a plasm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plasm = ecto.Plasm()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# create some cells&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cell1 = my_awesome_cpp_ecto_module.MyAwesomeCell1(param1=whatever1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cell2 = my_awesome_python_ecto_module.MyAwesomeCell2(param2=whatever2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# connect those cells in the plasm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plasm.connect(cell1[&lt;span class=&quot;string&quot;&gt;&#39;output&#39;&lt;/span&gt;] &amp;gt;&amp;gt; cell2[&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# execute the graph&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plasm.execute(niter=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重點其實只有 Plasm 的初始化、串接 cell 成 graph 與執行這三個部分:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# create a plasm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plasm = ecto.Plasm()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# connect those cells in the plasm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plasm.connect(cell1[&lt;span class=&quot;string&quot;&gt;&#39;output&#39;&lt;/span&gt;] &amp;gt;&amp;gt; cell2[&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# execute the graph&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plasm.execute(niter=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Cell-的機制詳解&quot;&gt;&lt;a href=&quot;#Cell-的機制詳解&quot; class=&quot;headerlink&quot; title=&quot;Cell 的機制詳解&quot;&gt;&lt;/a&gt;Cell 的機制詳解&lt;/h2&gt;&lt;p&gt;從上面的例子，大家應該可以明顯的看出，plasm 因為只是要串連寫好的 cell ，所以設定相對單純(目前我們先不討論 scheduling 等複雜的狀況)，但 cell 就不太一樣，上面只提到需要寫四個函式，卻沒有實例讓大家了解怎麼實作，接下來就會介紹比較實際的例子，讓大家了解 cell 要怎麼寫。&lt;/p&gt;
&lt;p&gt;首先我們看個簡單的例子，這個 class 是一個 Printer ，我們在產生這個 Printer 的 instance 時，可以設定裡面的兩個 data member – prefix&lt;em&gt; 和 suffix&lt;/em&gt; (或可以理解成參數)&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Printer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Printer(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp; prefix, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp; suffix)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prefix_(prefix),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        suffix_(suffix)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::ostream&amp;amp; out, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;amp; message)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    out &amp;lt;&amp;lt; prefix_ &amp;lt;&amp;lt; message &amp;lt;&amp;lt; suffix_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; prefix_, suffix_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假設要改寫成 ecto 的 cell，首先我們來宣告參數，透過 declare_params 這個函式可以做到，在這個例子裡，只是先單純宣告有兩個 params，提供這兩個參數的說明(這個說明可以用來自動生成文件，不過我們先忽略)，以及預設值。&lt;/p&gt;
&lt;p&gt;大家可能會疑惑的地方是，params.declare 這個用法怎麼突然就跑出來了。這是因為在 ecto 裡面，cell 之間的溝通是透過 tendrils 這個類別來處理，但這一篇先不提到 tendrils 的細節，所以才會有點混亂，不過如果去看 &lt;a href=&quot;http://plasmodic.github.io/ecto/api/html/classecto_1_1tendrils.html#a89e7ed34481d3ed987ddfd5ba35174ae&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tendrils 的 API&lt;/a&gt;，就會清楚這中間是怎麼一回事。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;declare_params&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tendrils&amp;amp; params)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  params.declare&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;prefix&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;A string to prefix printing with.&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;start&amp;gt;&amp;gt; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  params.declare&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;suffix&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;A string to append printing with.&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot; &amp;lt;&amp;lt;stop\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接著我們來定義 IO 的介面，透過 declare_io 來做，因為這個 cell 只需要接收需要印出的 message ，所以只需要宣告一個 input ，不需要宣告 output 。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;declare_io&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp; params, tendrils&amp;amp; inputs, tendrils&amp;amp; outputs)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  inputs.declare&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;The message to print.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;目前我們已經指定了對外的兩個重點 – 有哪些參數以及 IO 介面。接著該考慮內部使用的設定了，所以第一步是將 declare&lt;em&gt;params 裡面宣告的參數 (此例中是 prefix 跟 suffix) 跟類別裡面的 data member (此例中是 prefix&lt;/em&gt; 跟 suffix_) 連接。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp; params, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp; inputs, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp; outputs)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  params[&lt;span class=&quot;string&quot;&gt;&quot;prefix&quot;&lt;/span&gt;] &amp;gt;&amp;gt; prefix_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  params[&lt;span class=&quot;string&quot;&gt;&quot;suffix&quot;&lt;/span&gt;] &amp;gt;&amp;gt; suffix_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最後的重點就是，實作這個 cell 的功能，我們要把實際做的事情寫在 process 這個函式裡面。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp; inputs, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp; outputs)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; prefix_ &amp;lt;&amp;lt; inputs.get&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;message&quot;&lt;/span&gt;) &amp;lt;&amp;lt; suffix_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return ecto::OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以如果把四個函式合起來看，就會像這樣:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;ecto/ecto.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;ecto/registry.hpp&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; ecto::tendrils;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; overview&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Printer01&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;declare_params&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tendrils&amp;amp; params)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      params.declare&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;prefix&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;A string to prefix printing with.&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;start&amp;gt;&amp;gt; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      params.declare&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;suffix&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;A string to append printing with.&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot; &amp;lt;&amp;lt;stop\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;declare_io&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp; params, tendrils&amp;amp; inputs, tendrils&amp;amp; outputs)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      inputs.declare&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;message&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;The message to print.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp; params, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp; inputs, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp; outputs)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      params[&lt;span class=&quot;string&quot;&gt;&quot;prefix&quot;&lt;/span&gt;] &amp;gt;&amp;gt; prefix_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      params[&lt;span class=&quot;string&quot;&gt;&quot;suffix&quot;&lt;/span&gt;] &amp;gt;&amp;gt; suffix_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp; inputs, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tendrils&amp;amp; outputs)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; prefix_ &amp;lt;&amp;lt; inputs.get&amp;lt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&quot;string&quot;&gt;&quot;message&quot;&lt;/span&gt;) &amp;lt;&amp;lt; suffix_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return ecto::OK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; prefix_, suffix_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ECTO_CELL(ecto_overview, overview::Printer01, &lt;span class=&quot;string&quot;&gt;&quot;Printer01&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&quot;A simple stdout printer with prefix and suffix parameters.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;雖然整個類別被寫成很長，但其實只要熟悉 cell 的基本用法，就不會被這一堆程式碼嚇到。最後想跟大加補充說明一下，上面提到的 cell 寫法有個不直覺的地方是，沒有明顯的繼承關係，所以會覺得不符合我們的 cell 應該要繼承一個 base 的 cell class 的直覺。其實這邊是被 ECTO_CELL 這個 Macro 給處理掉了，所以才會看起來只有宣告幾個函式就寫完一個 cell 的感覺。&lt;/p&gt;
&lt;h2 id=&quot;總結&quot;&gt;&lt;a href=&quot;#總結&quot; class=&quot;headerlink&quot; title=&quot;總結&quot;&gt;&lt;/a&gt;總結&lt;/h2&gt;&lt;p&gt;這篇文章簡介了 ecto 的 cell 和 plasm，下一篇將會介紹 tendril 跟 scheduler 的機制，幫助大家更加理解 ecto ，並在未來能運用這個框架來建立自己的應用。&lt;/p&gt;
&lt;h2 id=&quot;延伸閱讀&quot;&gt;&lt;a href=&quot;#延伸閱讀&quot; class=&quot;headerlink&quot; title=&quot;延伸閱讀&quot;&gt;&lt;/a&gt;延伸閱讀&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://programmers.stackexchange.com/questions/171671/when-to-use-dag-directed-acyclic-graph-in-programming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;When to use DAG (Directed Acyclic Graph) in programming?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://plasmodic.github.io/ecto/ecto/usage/tutorials/plasms.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ecto 官方網頁的 plasm 介紹&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://plasmodic.github.io/ecto/ecto/overview/cells.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ecto 官方網頁的 cell 詳細介紹&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這次想要跟大家介紹 ROS ORK (Object Recognition Kitchen) 這個函式庫實作物體辨識 pipeline 的機
    
    </summary>
    
    
      <category term="ROS, ecto," scheme="http://blog.techbridge.cc/tags/ROS-ecto/"/>
    
  </entry>
  
  <entry>
    <title>給工程師的 Sketch Prototyping 簡易入門教學</title>
    <link href="http://blog.techbridge.cc/2016/06/04/sketch-prototyping-for-engineer/"/>
    <id>http://blog.techbridge.cc/2016/06/04/sketch-prototyping-for-engineer/</id>
    <published>2016-06-04T04:26:00.000Z</published>
    <updated>2016-06-08T12:25:42.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/img/kdchang/sketchapp.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.sketchapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sketch&lt;/a&gt; 是近來非常火紅的輕量級 UI 設計工具，簡易好上手的設計讓許多設計師紛紛從 PS 和以拉等其他工具跳槽過來，整個 Sketch 生態系也蓬勃發展。雖然筆者本業是工程師，但前陣子趁著買 Flinto （可以很輕易將 Sketch 的靜態頁面轉成 Prototype）送 Sketch 的行銷活動時同時入手了這兩套設計工具（雖然我把它當成買 Sketch 送 Flinto 啦：P），因此藉著機會分享一下給工程師的 Sketch Prototyping 簡易入門教學。當然有些讀者會疑惑：工程師學 Sketch 是要設計師搶飯碗嗎？（事實上很難啦）&lt;/p&gt;
&lt;p&gt;一般來說，在整個產品開發的過程當中，工程師和設計師的愛恨情仇已經可以編成好幾檔連續劇了，然而溝通不良的原因除了設計流程的問題外，有很大一部分是因為對於彼此的世界不了解（一個住火星，一個住土星？）。因此工程師和設計師若是試著了解對方的語言，或許就可以降低彼此的溝通成本，從此相親相愛了呢！而天賦異秉的人甚至有機會成為新創團隊人見人愛的超全端工程師（super full-stack&lt;br&gt;engineer）獨角獸，集設計、前後端、行動端、行銷業務技能於一身（咦）？好啦，言歸正傳，接下來就讓我們好好了解 Sketch 這個好用工具吧！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/kdchang/sketch-ui-kit.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Sketch-基本介紹&quot;&gt;&lt;a href=&quot;#Sketch-基本介紹&quot; class=&quot;headerlink&quot; title=&quot;Sketch 基本介紹&quot;&gt;&lt;/a&gt;Sketch 基本介紹&lt;/h2&gt;&lt;p&gt;Sketch 是一個 Mac 上的輕量級介面設計工具。2010 年由荷蘭公司 Bohemian Coding 所創建，目前提供 30 天試用版，正式版 99 鎂（教育價5折優惠），不過目前只有提供 Mac 版本，所以只能先跟使用其他作業系統的朋友說聲 Sorry 啦！&lt;/p&gt;
&lt;p&gt;究竟 Sketch 有哪些優點，讓許多設計師因此琵琶別抱呢？&lt;/p&gt;
&lt;h3 id=&quot;Sketch-優點&quot;&gt;&lt;a href=&quot;#Sketch-優點&quot; class=&quot;headerlink&quot; title=&quot;Sketch 優點&quot;&gt;&lt;/a&gt;Sketch 優點&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;活躍的第三方套件生態系！&lt;/li&gt;
&lt;li&gt;專為 UI 設計而生（Artboard 設計可以方便 UI 設計） &lt;/li&gt;
&lt;li&gt;輕量級，簡單好上手（工程師 OS：就像 Sublime 之於 Eclipse）&lt;/li&gt;
&lt;li&gt;內建和可擴充的豐富 UI 模版（iOS、Material Design 等）&lt;/li&gt;
&lt;li&gt;搭配 Flinto、Zeplin 可讓工程師更開心，設計師提早下班&lt;/li&gt;
&lt;li&gt;可以取代大部分 PS、以拉、Fireworks 等功能&lt;/li&gt;
&lt;li&gt;知名網路、科技公司都在用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看完了 Sketch 優點，相信讀者們一定摩拳擦掌準備牛刀小試啦！&lt;/p&gt;
&lt;h2 id=&quot;使用-Sketch-設計-Mobile-App-UI&quot;&gt;&lt;a href=&quot;#使用-Sketch-設計-Mobile-App-UI&quot; class=&quot;headerlink&quot; title=&quot;使用 Sketch 設計 Mobile App UI&quot;&gt;&lt;/a&gt;使用 Sketch 設計 Mobile App UI&lt;/h2&gt;&lt;p&gt;一般設計流程我們通常會有以下三種階段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Wireframe（線框圖）&lt;br&gt;保真度低（low fidelity ）、修改成本低。適合初期討論產品架構和基本功能。通常使用紙筆手繪，但建議於完成後電子化&lt;/li&gt;
&lt;li&gt;Mockup（視覺稿）&lt;br&gt;保真度中（middle fidelity ）、修改成本中。於 Mockup 階段著重於整體視覺、排版的靜態討論和確認，而 Sketch 主要會是在 Mockup 階段進行設計&lt;/li&gt;
&lt;li&gt;Prototype（原型）&lt;br&gt;保真度高（high fidelity ），接近最終產品、修改成本高。確認互動設計的流程並確認架構和視覺規劃是否有需要調整之處&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先介紹一下 Sketch 工作空間，左邊是圖層區，右邊是屬性、中間是工作區、上面是工具欄：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/kdchang/sketch-0.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;p&gt;工具欄可以點擊右鍵自定義：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/kdchang/sketch-0-1.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;p&gt;由於 UI 設計是 Sketch 主要的強項（尤其是行動端），在 Sketch 中 Artboard 是基礎的設計單元（成果展示區域），我們可以在一個 Page 中定義多個 Artboard。根據 Sketch 的設計，我們可以一次瀏覽多個 Artboard（也可說是多個介面），這樣可以更清楚整個設計 flow ，這是 Sketch 蠻大的一個優點（一覽眾山小？）。&lt;/p&gt;
&lt;p&gt;現在，我們終於開始設計我們的新 App UI 啦！首先，我們透過左上方的新增按鈕新增了一個 Artboard ，並選擇了 iPhone6 當做設計基底（有 iPhone、Android、RWD等可以選）。接下來我們要打開在 Sketch 中內建的元件模版，iOS 和 Material Design、icon設計等（網路上也有很多網友提供自己的設計可以下載），這邊因為是使用 iPhone6 的 Artboard，因此我們打開 iOS 元件模版。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/kdchang/sketch-7.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/kdchang/sketch-1.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/kdchang/sketch-2.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;p&gt;接下來進行複製貼上大法！將元件複製到 Artboard 上就可以了！現在小工程師也可以設計簡單的 UI 啦！可以透過右上角工具預覽或是分享的方式看到成果！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/kdchang/sketch-4.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;從-Mockup-到-Prototype&quot;&gt;&lt;a href=&quot;#從-Mockup-到-Prototype&quot; class=&quot;headerlink&quot; title=&quot;從 Mockup 到 Prototype&quot;&gt;&lt;/a&gt;從 Mockup 到 Prototype&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/kdchang/sketch-flinto.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;br&gt;透過 Sketch 設計完成靜態檔案，若我們想將靜態檔案轉成 Prototype 進行使用者測試，我們可以使用 Flinto 好工具！透過簡單的連結就可以讓你的 Sketch 動起來啦（目前支援了簡單的手勢和動畫）！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/kdchang/flinto-3.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/kdchang/flinto-4.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/kdchang/flinto-5.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;結論&quot;&gt;&lt;a href=&quot;#結論&quot; class=&quot;headerlink&quot; title=&quot;結論&quot;&gt;&lt;/a&gt;結論&lt;/h2&gt;&lt;p&gt;以上就是給工程師的 Sketch Prototyping 簡易入門教學。事實上透過整合 &lt;a href=&quot;https://zeplin.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zeplin&lt;/a&gt;（可以方便註解和查詢設計相對位置和色碼）、&lt;a href=&quot;https://www.invisionapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Invision&lt;/a&gt;（支援變更記錄，可以當做版本控管使用）等工具進行協作，還可以更加加快整個產品設計流程。透過前期的完善溝通討論，不但可以降低後續的溝通成本更可以讓完成的產品更接近最初的設計，更重要的是讓工程師和設計師的感情更好了！若你對於 Sketch 有興趣可以&lt;a href=&quot;http://slides.com/kd-chang/sketch-prototyping-for-engineer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;參考這份投影片&lt;/a&gt;有更完整的教學介紹。另外也可以參考&lt;a href=&quot;http://www.sketchapp.com/learn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方教學影片&lt;/a&gt;。最後再次強調工程師學 Sketch 並非要去搶設計師搶飯碗。而是工程師和設計師若是試著了解對方的語言，或許就可以降低彼此的溝通成本。同理也建議設計師們可以去試著學一些簡單的程式語言基礎概念。筆者才疏學淺，若讀者有任何學習心得也歡迎分享交流：）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/kdchang/sketch-5.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;常用外掛&quot;&gt;&lt;a href=&quot;#常用外掛&quot; class=&quot;headerlink&quot; title=&quot;常用外掛&quot;&gt;&lt;/a&gt;常用外掛&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://sketchtoolbox.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;外掛管理工具 Sketch Toolbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Notebook 註解好幫手&lt;/li&gt;
&lt;li&gt;Sketch Flinto 從 Mockup 到 Prototype&lt;/li&gt;
&lt;li&gt;Content Generator Sketch Plugin 生成假資料&lt;/li&gt;
&lt;li&gt;Sketch Measure 測量位置、大小&lt;/li&gt;
&lt;li&gt;Icon Stamper 簡單生成不同大小 icon&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;延伸閱讀&quot;&gt;&lt;a href=&quot;#延伸閱讀&quot; class=&quot;headerlink&quot; title=&quot;延伸閱讀&quot;&gt;&lt;/a&gt;延伸閱讀&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sketchcn.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sketch 簡體中文教學&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sketchchina.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sketch 問答&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;http://blog.kdchang.cc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kdchang&lt;/a&gt; 文藝型開發者，夢想是做出人們想用的產品和辦一所心目中理想的學校，目前專注在 Mobile 和 IoT 應用開發。A Starter &amp;amp; Maker. JavaScript, Python &amp;amp; iOS/Android lover. Keep Shipping Cool Mobile/IoT App &amp;amp; Web App.:)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/kdchang/sketchapp.png&quot; alt=&quot;給工程師的 Sketch Prototyping 簡易入門教學&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;
    
    </summary>
    
    
      <category term="Sketch, Prototyping, Wireframe, Mockup" scheme="http://blog.techbridge.cc/tags/Sketch-Prototyping-Wireframe-Mockup/"/>
    
  </entry>
  
  <entry>
    <title>Reactive Programming 簡介與教學(以 RxJS 為例)</title>
    <link href="http://blog.techbridge.cc/2016/05/28/reactive-programming-intro-by-rxjs/"/>
    <id>http://blog.techbridge.cc/2016/05/28/reactive-programming-intro-by-rxjs/</id>
    <published>2016-05-27T16:03:18.000Z</published>
    <updated>2016-06-08T12:25:42.000Z</updated>
    
    <content type="html">&lt;p&gt;Rx 其實也出來一段時間了，前陣子看到一篇&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;解釋得蠻好的，擷取重點並加入一些自己的心得範例供大家參考，畢竟 Rx 中文的介紹似乎少了點…&lt;/p&gt;
&lt;p&gt;相信聽過 Rx 的讀者，應該也會耳聞 RxJS, RxJAVA, RxAndroid等等，因此被 Google 慣壞的我們一定會試著去搜尋一下 Rx 到底是什麼&lt;/p&gt;
&lt;p&gt;然後在 Google Search Result page 的最下方會看到 MSDN 的 Reactive Extensions 和 ReactiveX &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/RxGoogleResult.png&quot; alt=&quot;Rx goolge search result&quot; title=&quot;Rx goolge search result&quot;&gt;&lt;/p&gt;
&lt;p&gt;好的看來就是我們要找的東西，但這好眼熟喔? 是每天在寫的React嗎？難道是相關的東西？!&lt;/p&gt;
&lt;p&gt;定睛一看會發現… 恩，基本上沒什麼關係。&lt;/p&gt;
&lt;p&gt;Reactive Extensions 是 Microsoft open source 推廣的一個lib&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Reactive Extensions (Rx) is a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;網站連結：&lt;a href=&quot;https://rx.codeplex.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rx&lt;/a&gt;&lt;br&gt;網站連結：&lt;a href=&quot;http://reactivex.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactiveX.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/reactiveX.png&quot; alt=&quot;ReactiveX&quot; title=&quot;ReactiveX&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ReactiveX is a combination of the best ideas from
the Observer pattern, the Iterator pattern, and functional programming&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ok, Observer pattern, Iterator patter, functional programming 都聽過，而這些串起來似乎就是傳說中的 Reactive Programming.&lt;/p&gt;
&lt;h1 id=&quot;What-is-Reactive-Programming&quot;&gt;&lt;a href=&quot;#What-is-Reactive-Programming&quot; class=&quot;headerlink&quot; title=&quot;What is Reactive Programming?&quot;&gt;&lt;/a&gt;What is Reactive Programming?&lt;/h1&gt;&lt;p&gt;Reactive Programming 是一種以 asynchronous data streams 為中心思想出發的程式撰寫方式，比較常聽到的是 asynchronous event，像是 user click event, mouse hover event 等等，而這邊特別的則是 &lt;strong&gt;&lt;span style=&quot;color:red; font-style: italic;&quot;&gt;data&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; 與 &lt;strong&gt;&lt;span style=&quot;color:red; font-style: italic;&quot;&gt;stream&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;，顧名思義，Reactive Extensions 將 event 延伸為 data，並且注重在 stream （串流）上，也就是 &lt;strong&gt;&lt;span style=&quot;color:red; font-style: italic;&quot;&gt;時間序列上的一連串資料事件&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;，Rx讓你將任何事情都變化為 data streams : variables, user inputs, properties, caches, data structures 等等皆可，透過 Observe 這些 data streams，並依據其造成的 side effects 進行對應的動作。&lt;/p&gt;
&lt;h3 id=&quot;Stream-時間序列上的一連串資料事件&quot;&gt;&lt;a href=&quot;#Stream-時間序列上的一連串資料事件&quot; class=&quot;headerlink&quot; title=&quot;Stream:     時間序列上的一連串資料事件&quot;&gt;&lt;/a&gt;&lt;strong&gt;Stream&lt;/strong&gt;:     &lt;strong&gt;時間序列上的一連串資料事件&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;以一個 click event 來說，在 user 點擊的動作發生後，會有一段時間觸發了幾個事件 (event stream)：value, error or completed signal&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/clickeventstream.png&quot; alt=&quot;click event stream (source：https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)&quot; title=&quot;click event stream &quot;&gt;&lt;/p&gt;
&lt;p&gt;而在 Reactive Programming 的概念下，你可以把任何事情都看作 &lt;strong&gt;Stream&lt;/strong&gt;，並且 &lt;strong&gt;Observe&lt;/strong&gt; stream 中的變化，以下面一個例子來說：&lt;/p&gt;
&lt;p&gt;假設我們想要印出一個包含 1 到 5 的 Array，一般我們會這樣做：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jsbin.com/fiyiyo/edit?js,console,output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;example 1&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;iterate1To5.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source.map((item) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;onNext: &quot;&lt;/span&gt;+item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而，以Rx來說，任何事情都要 Observable，因此我們可以這樣做：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;observe1To5.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Creates an observable sequence of 5 integers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// catch every status and print out value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onNext: &#39;&lt;/span&gt; + x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onError: &#39;&lt;/span&gt; + e.message),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的例子中，我們創建了一個 Observable 的整數陣列，並且透過 &lt;strong&gt;subscribe&lt;/strong&gt; 的動作去 &lt;strong&gt;listening&lt;/strong&gt; 這個陣列，當有我們設定的 event 觸發時，我們就會 &lt;strong&gt;observe&lt;/strong&gt; 到，並採取對應動作，這基本上就是 &lt;strong&gt;Observer Design Pattern&lt;/strong&gt; 做的事情&lt;/p&gt;
&lt;h2 id=&quot;Why-RxJS&quot;&gt;&lt;a href=&quot;#Why-RxJS&quot; class=&quot;headerlink&quot; title=&quot;Why RxJS&quot;&gt;&lt;/a&gt;Why RxJS&lt;/h2&gt;&lt;p&gt;以 Javascript 來說，想要抓取這些事件，一般可以用 callback 或是 Promise 來達成，然而 Promise 主要設計於一次性的事件與單一回傳值，而 RxJS 除了包含 Promise 外，提供了更豐富的整合應用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Single return value&lt;/th&gt;
&lt;th&gt;Mutiple return values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Pull/Synchronous/Interactive&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;Iterables (Array/Set/Map/Object)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Push/Asynchronous/Reactive&lt;/td&gt;
&lt;td&gt;Promise&lt;/td&gt;
&lt;td&gt;Observable&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;還記得前面 ReactiveX 的定義嗎？ “combination of Observer pattern, &lt;strong&gt;Iterator pattern&lt;/strong&gt; and functional programming” &lt;/p&gt;
&lt;p&gt;RxJS 結合 Array#extras 的優點，讓你能夠方便處理 &lt;strong&gt;Multiple return values&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;延伸上面的例子來說：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jsbin.com/yizequ/edit?html,js,console,output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;example 2&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;iteratorPattern.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; data = [&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;G&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;H&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; source = Rx.Observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 .interval(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 .take(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 .map(i =&amp;gt; data[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result.subscribe(x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;當你 subscribe 這個 Observale 的 data source 時，他能讓你 &lt;strong&gt;監聽&lt;/strong&gt; 陣列中，每 500ms (interval) 取一個值 (map(i =&amp;gt; data[i])) 並取 6 次 (take(6))&lt;/p&gt;
&lt;p&gt;再回到最早的 click event 來說，假若我們想要能夠抓取 single click 與 double click 的事件，用最原始的 javascript 可能會需要許多變數來紀錄狀態、時間等等，但透過 RxJS 提供的 library，你只需要短短四行 code 就可以達成：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jsfiddle.net/staltz/4gGgs/27/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整範例&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;multiClickStream.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; multiClickStream = clickStream&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .buffer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; clickStream.throttle(&lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;); &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;list&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; list.length; &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x &amp;gt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/muticlick.png&quot; alt=&quot;Double click event (source：https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)&quot; title=&quot;double click&quot;&gt;     &lt;/p&gt;
&lt;p&gt;由上圖可以清楚看到，RxJS 幫你把 Stream 上的 event 依照你想要的時間做 &lt;strong&gt;整理&lt;/strong&gt;，&lt;code&gt;buffer&lt;/code&gt; 住觸發時間在 250ms 間的 click events，並且利用 &lt;code&gt;map&lt;/code&gt; 函式抓出每個 event list 的長度，並進一步抓出長度大於 2 ，也就是 double click 的 event 出來。&lt;/p&gt;
&lt;p&gt;接著你只需要 &lt;code&gt;subscribe&lt;/code&gt; 你剛剛定義的 event stream，即可做出反應(reaction)&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;multiClickStream.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;multiClickStream.subscribe(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;numclicks&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;h2&#39;&lt;/span&gt;).textContent = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;+numclicks+&lt;span class=&quot;string&quot;&gt;&#39;x click&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;More-examples-Autocompletion-service&quot;&gt;&lt;a href=&quot;#More-examples-Autocompletion-service&quot; class=&quot;headerlink&quot; title=&quot;More examples (Autocompletion service)&quot;&gt;&lt;/a&gt;More examples (Autocompletion service)&lt;/h3&gt;&lt;p&gt;以現在的 web app 來說，大量依賴 user 互動的效果與呈現，在不影響使用者體驗的前提下，多是用非同步的方式去抓取資料、渲染頁面等等，因此 Rx 系列的出現絕對是一個很大的助益。&lt;/p&gt;
&lt;p&gt;最後讓我們再以一個例子來做結尾，利用 RxJS 與 Jquery 打造 Wikipedia Autocompletion Service。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://jsbin.com/yojuwu/edit?html,js,output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整範例&lt;/a&gt;&lt;br&gt;(source: &lt;a href=&quot;http://xgrommx.github.io/rx-book/why_rx.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://xgrommx.github.io/rx-book/why_rx.html&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&quot;Step-1&quot;&gt;&lt;a href=&quot;#Step-1&quot; class=&quot;headerlink&quot; title=&quot;Step 1&quot;&gt;&lt;/a&gt;Step 1&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; keyups = Rx.Observable.fromEvent(input, &lt;span class=&quot;string&quot;&gt;&#39;keyup&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .map(e =&amp;gt; e.target.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .filter(text =&amp;gt; text.length &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Now throttle the input for 500ms */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; throttled = keyups.throttle(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ms */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Now get only distinct values, so we eliminate the arrows and other control characters */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; distinct = throttled.distinctUntilChanged();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;我們先利用 Rx.Observable.fromEvent 來 Create 一個 binding keyup event 的 Observalbe keyups object，並且針對每次事件發生時，回傳被綁定的元素其 value 值長度大於二的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接著設定 keyups 的 throttle 時間，將 500ms 內的input當做一次event去觸發&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再來剔除掉不相干的控制輸入，只抓取 distinct 的 value&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Step-2&quot;&gt;&lt;a href=&quot;#Step-2&quot; class=&quot;headerlink&quot; title=&quot;Step 2&quot;&gt;&lt;/a&gt;Step 2&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;searchWikipedia&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;term&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        url: &lt;span class=&quot;string&quot;&gt;&#39;http://en.wikipedia.org/w/api.php&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataType: &lt;span class=&quot;string&quot;&gt;&#39;jsonp&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            action: &lt;span class=&quot;string&quot;&gt;&#39;opensearch&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            format: &lt;span class=&quot;string&quot;&gt;&#39;json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            search: term&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).promise();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;簡單撰寫一個 ajax 來 fetch search api&lt;/li&gt;
&lt;li&gt;這邊我們直接 return promise，RxJS 會幫你 wrap 起來變成 Obserbale，或是你也可以利用 &lt;code&gt;Rx.Observable.fromPromise&lt;/code&gt;來將原有的 Promise 改裝&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Step-3&quot;&gt;&lt;a href=&quot;#Step-3&quot; class=&quot;headerlink&quot; title=&quot;Step 3&quot;&gt;&lt;/a&gt;Step 3&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; suggestions = distinct.flatMapLatest(searchWikipedia);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;利用 &lt;a href=&quot;http://xgrommx.github.io/rx-book/content/observable/observable_instance_methods/flatmaplatest.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;flatMapLatest&lt;/a&gt; 將剛才的 Observable object &lt;code&gt;distinct&lt;/code&gt; 與 &lt;code&gt;searchWikipedia&lt;/code&gt; function 做結合，then we good to go! (先不管flatMapLatest是什麼，總之他會將 distinct 這個 Observable sequence內的元素丟給 searchWikipedia，並將回傳回來的資料再轉換成 Observable sequence，讓人可以 subscribe)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Step-4&quot;&gt;&lt;a href=&quot;#Step-4&quot; class=&quot;headerlink&quot; title=&quot;Step 4&quot;&gt;&lt;/a&gt;Step 4&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;suggestions.subscribe(data =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; res = data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $results.empty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $.each(res, (_, value) =&amp;gt; $(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;li&amp;gt;&#39;&lt;/span&gt; + value + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/li&amp;gt;&#39;&lt;/span&gt;).appendTo($results));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, error =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* handle any errors */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $results.empty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;li&amp;gt;Error: &#39;&lt;/span&gt; + error + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/li&amp;gt;&#39;&lt;/span&gt;).appendTo($results);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;接著就是 Subscribe 剛剛的 Observable sequence &lt;strong&gt;suggestions&lt;/strong&gt;，並將 listen 到的資料 show 出來&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;就這麼簡單完成了一個 Autocompletion 的 service 了！&lt;/p&gt;
&lt;h3 id=&quot;題外話&quot;&gt;&lt;a href=&quot;#題外話&quot; class=&quot;headerlink&quot; title=&quot;題外話&quot;&gt;&lt;/a&gt;題外話&lt;/h3&gt;&lt;p&gt;先簡單介紹什麼是 flatMap 與 flatMapLatest，畢竟剛剛範例有用到，而實際上 RxJS 還有很多複雜的 function 可以應用，待之後我有時間再繼續專研吧！但有興趣的讀者可以在文章最下方的連結找到資源。&lt;/p&gt;
&lt;p&gt;flatMap 會將 一個 Observable Sequence 的元素 映射到 另一個新的 Observable Sequence，並且subscribe 原先的 Observable Sequence 的人也都可以聽得到&lt;/p&gt;
&lt;p&gt;簡單的例子如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;flatMap&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .flatMap(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Rx.Observable.range(x, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Next: &#39;&lt;/span&gt; + x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Error: &#39;&lt;/span&gt; + err);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Completed&#39;&lt;/span&gt;);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Result: &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Next: 1 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Next: 2  Rx.Observable.range(1, 2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Next: 2 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Next: 3  Rx.Observable.range(2, 2)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Completed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;See? 他會把 sequence 中的元素丟進 callback，並回傳 Observable sequence，你也可以丟入 Promise，就像範例中做的。&lt;/p&gt;
&lt;p&gt;而 flatMapLatest 則是只會進行最後一次的 sequence，以剛剛的範例來說，最後subscribe的人接收到的會是最新的那個 Observable sequence 的結果！而不會每打一個字所搜尋的結果都一直累加顯示上去。&lt;/p&gt;
&lt;h2 id=&quot;One-more-thing&quot;&gt;&lt;a href=&quot;#One-more-thing&quot; class=&quot;headerlink&quot; title=&quot;One more thing&quot;&gt;&lt;/a&gt;One more thing&lt;/h2&gt;&lt;p&gt;在我前面放的圖中，描繪 Click event 的 叫做 &lt;strong&gt;marble&lt;/strong&gt; 圖，這邊有個網站可以讓你以視覺化互動的方式去操作這些 event，幫助你理解 Rx 當中的各個 function 之功用！非常推薦！！&lt;br&gt;去玩玩吧！&lt;a href=&quot;http://rxmarbles.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rxmarbles&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;總結&quot;&gt;&lt;a href=&quot;#總結&quot; class=&quot;headerlink&quot; title=&quot;總結&quot;&gt;&lt;/a&gt;總結&lt;/h2&gt;&lt;p&gt;Rx 真的是蠻有趣的東西，提供的lib又號稱毫無相依性，可以應用在各種framework上方，只是必須要懂得如何Think in Reactive Programming，否則這些lib的用法還真的是不好理解，這篇拋磚引玉簡單介紹一下，之後會再有更深入的研究！ 有什麼說明不對的地方也請見諒與指教！&lt;/p&gt;
&lt;p&gt;參考資料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The introduction to Reactive Programming you’ve been missing (by @andrestaltz)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://xgrommx.github.io/rx-book/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rx-book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive-Extensions RxJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rxmarbles.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rxmarbles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;http://blog.arvinh.info/about/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@arvinh&lt;/a&gt; 前端攻城獅，熱愛數據分析和資訊視覺化&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Rx 其實也出來一段時間了，前陣子看到一篇&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;解釋得蠻好的，擷取重點並加入一些自
    
    </summary>
    
    
      <category term="Rx, RxJS" scheme="http://blog.techbridge.cc/tags/Rx-RxJS/"/>
    
  </entry>
  
  <entry>
    <title>快速取得 apk 相關資訊</title>
    <link href="http://blog.techbridge.cc/2016/05/20/fast-way-to-get-apk-information/"/>
    <id>http://blog.techbridge.cc/2016/05/20/fast-way-to-get-apk-information/</id>
    <published>2016-05-19T16:20:08.000Z</published>
    <updated>2016-06-08T12:25:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;http://blog.techbridge.cc/2016/03/24/android-decompile-introduction/&quot;&gt;之前&lt;/a&gt;，我們曾經介紹過如何反編譯 Android Apk。而藉由反編譯，我們可以知道許多跟 apk 有關的資訊，例如說 &lt;code&gt;AndroidManifest.xml&lt;/code&gt;，只要這個檔案就可以看出 apk 的一些基本資訊，還可以看到整個 apk 的程式碼跟使用到的資源（圖檔、影片、聲音等等）。&lt;/p&gt;
&lt;p&gt;但若是今天我們只想要知道基本資訊，完全不想知道 apk 是怎麼寫的，也根本不關心它用到哪些資源，那該怎麼辦呢？反編譯需要一點時間，愈大的 apk 需要愈久，有沒有更好的方法呢？&lt;/p&gt;
&lt;h2 id=&quot;需要哪些資訊？&quot;&gt;&lt;a href=&quot;#需要哪些資訊？&quot; class=&quot;headerlink&quot; title=&quot;需要哪些資訊？&quot;&gt;&lt;/a&gt;需要哪些資訊？&lt;/h2&gt;&lt;p&gt;首先我們先來定義一下「基本資訊」指的是哪些。以我來說，我想取得的基本資訊有以下六點：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;package name&lt;/li&gt;
&lt;li&gt;version code&lt;/li&gt;
&lt;li&gt;version name&lt;/li&gt;
&lt;li&gt;launch activity&lt;/li&gt;
&lt;li&gt;Google SHA1 Fingerprint&lt;/li&gt;
&lt;li&gt;Facebook Keyhash&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前四個的用途在於，假設你今天做了一個公司內部的 apk 上架系統，如果有了前四項資訊，就可以做跟 Google Play 相似的驗證，例如說驗證 package name 跟上次上傳的是否一樣、版本號是否比上一次的高等等。&lt;/p&gt;
&lt;p&gt;至於後兩個呢？有串接過 Google 跟 Facebook 登入的讀者就會知道，這兩個是串登入時必備的東西。你要在設定裡面新增這兩組 key，才能夠使用登入功能，否則會出現驗證錯誤之類的字眼。&lt;/p&gt;
&lt;p&gt;知道我們需要哪些以後，就來動手做吧！&lt;/p&gt;
&lt;h2 id=&quot;好用的-keytool&quot;&gt;&lt;a href=&quot;#好用的-keytool&quot; class=&quot;headerlink&quot; title=&quot;好用的 keytool&quot;&gt;&lt;/a&gt;好用的 keytool&lt;/h2&gt;&lt;p&gt;&lt;code&gt;keytool&lt;/code&gt; 是系統內建，與認證相關的指令。&lt;br&gt;我們可以用 &lt;code&gt;keytool -list -printcert -jarfile NAME.apk&lt;/code&gt; 提取出一些資訊：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;簽署者 #1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;簽章:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;擁有者: CN=Android Debug, O=Android, C=US&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;發出者: CN=Android Debug, O=Android, C=US&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;序號: 4b52355e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有效期自: Sun Jan 17 05:53:34 CST 2010 到: Mon Jan 17 05:53:34 CST 2011&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;憑證指紋:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   MD5:  14:99:01:12:7A:69:CD:75:4F:31:75:8C:59:F6:71:63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   SHA1: 24:69:FD:17:6B:C3:43:FC:3A:85:EC:4B:C5:D7:9F:09:4A:71:60:80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   SHA256: 57:EB:73:81:D7:08:E6:45:FE:26:99:FB:3C:1F:37:1E:EE:38:39:20:E0:2D:C6:76:0E:84:2B:DD:1C:5C:C9:70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   簽章演算法名稱: SHA1withRSA&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   版本: 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以這個 apk 來說，列出了：擁有者、發出者、有效期限、憑證指紋等等的資訊，而其中的 &lt;code&gt;SHA1&lt;/code&gt; 就是 Google 登入會用到的資訊。&lt;/p&gt;
&lt;p&gt;那 Facebook Keyhash 呢？從 &lt;a href=&quot;https://developers.facebook.com/docs/android/getting-started#release-key-hash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文件&lt;/a&gt; 可以知道，其實就只是把 sha1 先變成 binary 然後再做 base64 而已。&lt;/p&gt;
&lt;p&gt;只要有了 sha1，搭配一些指令，就可以很簡單的生成 Facebook Keyhash。&lt;/p&gt;
&lt;h2 id=&quot;萬能的-aapt&quot;&gt;&lt;a href=&quot;#萬能的-aapt&quot; class=&quot;headerlink&quot; title=&quot;萬能的 aapt&quot;&gt;&lt;/a&gt;萬能的 aapt&lt;/h2&gt;&lt;p&gt;aapt 的全名是：Android Asset Packaging Tool，超級好用！&lt;br&gt;可以先來看看 aapt 到底可以做哪些事情&lt;br&gt;由於我們需要的是取出資訊，因此直接看 dump 的部份：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;aapt d[ump] [--values] WHAT file.&amp;#123;apk&amp;#125; [asset [asset ...]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  badging          Print the label and icon for the app declared in APK.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  permissions      Print the permissions from the APK.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  resources        Print the resource table from the APK.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  configurations   Print the configurations in the APK.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  xmltree          Print the compiled xmls in the given assets.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  xmlstrings       Print the strings of the given compiled xml assets.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有興趣的讀者可以每一個都試試看，看會出現什麼結果。以我們的需求來講，badging 是最符合的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;aapt dump badging NAME.apk&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package: name=&amp;apos;com.gmail.aszx87410.movie_to_nine&amp;apos; versionCode=&amp;apos;1&amp;apos; versionName=&amp;apos;1.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sdkVersion:&amp;apos;8&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;targetSdkVersion:&amp;apos;16&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uses-permission:&amp;apos;android.permission.INTERNET&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uses-gl-es:&amp;apos;0x20000&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uses-feature-not-required:&amp;apos;android.hardware.telephony&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uses-feature:&amp;apos;android.hardware.screen.portrait&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uses-feature-not-required:&amp;apos;android.hardware.screen.landscape&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;application-label:&amp;apos;今晚九點電影2.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;application-label-he:&amp;apos;今晚九點電影2.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;application-label-es:&amp;apos;今晚九點電影2.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;application-label-iw:&amp;apos;今晚九點電影2.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;application-icon-120:&amp;apos;res/drawable-ldpi/icon.png&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;application-icon-160:&amp;apos;res/drawable-mdpi/icon.png&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;application-icon-240:&amp;apos;res/drawable-hdpi/icon.png&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;application-icon-320:&amp;apos;res/drawable-xhdpi/icon.png&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;application-icon-480:&amp;apos;res/drawable-xxhdpi/icon.png&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;application: label=&amp;apos;今晚九點電影2.0&amp;apos; icon=&amp;apos;res/drawable-mdpi/icon.png&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;launchable-activity: name=&amp;apos;com.ansca.corona.CoronaActivity&amp;apos;  label=&amp;apos;今晚九點電影2.0&amp;apos; icon=&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uses-feature:&amp;apos;android.hardware.touchscreen&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uses-implied-feature:&amp;apos;android.hardware.touchscreen&amp;apos;,&amp;apos;assumed you require a touch screen unless explicitly made optional&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;other-activities&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;other-receivers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;other-services&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;supports-screens: &amp;apos;small&amp;apos; &amp;apos;normal&amp;apos; &amp;apos;large&amp;apos; &amp;apos;xlarge&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;supports-any-density: &amp;apos;true&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;locales: &amp;apos;--_--&amp;apos; &amp;apos;he&amp;apos; &amp;apos;es&amp;apos; &amp;apos;iw&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;densities: &amp;apos;120&amp;apos; &amp;apos;160&amp;apos; &amp;apos;240&amp;apos; &amp;apos;320&amp;apos; &amp;apos;480&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;native-code: &amp;apos;&amp;apos; &amp;apos;armeabi-v7a&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;將將將將～&lt;br&gt;我們所需要的資訊全部出現在這裡了，還附帶權限列表、app logo、app 名稱等等的資訊&lt;br&gt;做到這邊，全部需要的東西都有了，剩下就只是切出字串與整合而已&lt;/p&gt;
&lt;h2 id=&quot;總結&quot;&gt;&lt;a href=&quot;#總結&quot; class=&quot;headerlink&quot; title=&quot;總結&quot;&gt;&lt;/a&gt;總結&lt;/h2&gt;&lt;p&gt;今天這篇文章簡單介紹了 &lt;code&gt;keytool&lt;/code&gt; 跟 &lt;code&gt;aapt&lt;/code&gt; 的使用，主要是想要不靠 &lt;code&gt;apktool&lt;/code&gt;，利用其他工具取出我們想要的資訊，既省時又省力。&lt;/p&gt;
&lt;p&gt;如果你有興趣知道最後做出來的成品長怎樣，&lt;a href=&quot;https://github.com/aszx87410/apkinfo.sh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;apkinfo.sh&lt;/a&gt; 是我放在 github 上面的一個小專案，用途就跟這篇文章所教的一樣，就是取出 apk 的相關資訊。&lt;/p&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;http://huli.logdown.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@huli&lt;/a&gt; 野生工程師，相信分享與交流能讓世界變得更美好&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;http://blog.techbridge.cc/2016/03/24/android-decompile-intr
    
    </summary>
    
    
      <category term="Android, aapt, keytool, hashkey" scheme="http://blog.techbridge.cc/tags/Android-aapt-keytool-hashkey/"/>
    
  </entry>
  
  <entry>
    <title>使用 Object Recognition Kitchen 的 Linemod 演算法辨識物體</title>
    <link href="http://blog.techbridge.cc/2016/05/14/ros-object-recognition-kitchen/"/>
    <id>http://blog.techbridge.cc/2016/05/14/ros-object-recognition-kitchen/</id>
    <published>2016-05-14T03:21:49.000Z</published>
    <updated>2016-06-08T12:30:48.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這次要介紹的工具是 ROS 裡面專門用來作物體辨識的 &lt;a href=&quot;http://wg-perception.github.io/object_recognition_core/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Object Recognition Kitchen&lt;/a&gt; (以下簡稱為 ORK )，這個工具比較像是一個框架，裡面包含了好幾種演算法(你可以根據自己的需求使用不同的演算法)，這篇文章要介紹的只是其中一種 – Linemod 。 Linemod 是一個辨識效果很不錯的 3D 物體辨識演算法(不過一個使用條件是物體須是剛體)，所以想藉此機會分享給大家，以後只要你想要，就可以直接拿這個工具來串自己的機器人應用。&lt;/p&gt;
&lt;h2 id=&quot;安裝-ORK-amp-Linemod&quot;&gt;&lt;a href=&quot;#安裝-ORK-amp-Linemod&quot; class=&quot;headerlink&quot; title=&quot;安裝 ORK &amp;amp; Linemod&quot;&gt;&lt;/a&gt;安裝 ORK &amp;amp; Linemod&lt;/h2&gt;&lt;p&gt;雖然 ORK 的開發者已經寫了一份滿不錯的&lt;a href=&quot;http://wg-perception.github.io/object_recognition_core/install.html#install&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安裝 tutorial&lt;/a&gt;，不過我覺得還是值得為他再寫一份自己的整理筆記，可以把過程中遇到的一些問題都整理下來供大家參考。&lt;/p&gt;
&lt;p&gt;我目前跑起來的環境是 Ubuntu 14.04+ROS Indigo，首先來裝一些 ORK 需要用到的 package !&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export DISTRO=indigo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install libopenni-dev ros-$&amp;#123;DISTRO&amp;#125;-catkin ros-$&amp;#123;DISTRO&amp;#125;-ecto* ros-$&amp;#123;DISTRO&amp;#125;-opencv-candidate ros-$&amp;#123;DISTRO&amp;#125;-moveit-msgs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下來就要安裝 ORK 啦，然後因為我比較喜歡 build from source，所以我會下面會放上一份複雜版的安裝方法，裡面會有比較多跟 error 奮鬥的過程，如果你比較喜歡直接玩應用，安裝什麼的懶得管，那看簡單版的安裝方式其實就可以了。&lt;/p&gt;
&lt;h3 id=&quot;超簡單版安裝方式&quot;&gt;&lt;a href=&quot;#超簡單版安裝方式&quot; class=&quot;headerlink&quot; title=&quot;超簡單版安裝方式&quot;&gt;&lt;/a&gt;超簡單版安裝方式&lt;/h3&gt;&lt;p&gt;超簡單版顧名思義就是超簡單，完全不要管我們會用到哪些 package，只要是 ORK 底下的 package，都裝下去，缺點就是會多浪費一些硬碟空間。只要用一行指令就搞定:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install ros-indigo-object-recognition-kitchen-*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;稍微理解自己裝了什麼的安裝方式&quot;&gt;&lt;a href=&quot;#稍微理解自己裝了什麼的安裝方式&quot; class=&quot;headerlink&quot; title=&quot;稍微理解自己裝了什麼的安裝方式&quot;&gt;&lt;/a&gt;稍微理解自己裝了什麼的安裝方式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install ros-indigo-object-recognition-core ros-indigo-object-recognition-linemod ros-indigo-object-recognition-msgs ros-indigo-object-recognition-renderer ros-indigo-object-recognition-ros ros-indigo-object-recognition-ros-visualization&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Build-From-Source版安裝方式&quot;&gt;&lt;a href=&quot;#Build-From-Source版安裝方式&quot; class=&quot;headerlink&quot; title=&quot;Build From Source版安裝方式&quot;&gt;&lt;/a&gt;Build From Source版安裝方式&lt;/h3&gt;&lt;p&gt;首先來先裝跟 ROS 銜接的 package，首先要先開啟 terminal，切到 catkin_workspace/src 底下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone http://github.com/wg-perception/object_recognition_msgs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git clone http://github.com/wg-perception/object_recognition_ros&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git clone http://github.com/wg-perception/object_recognition_ros_visualization&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然後因為今天的主角是 linemod，所以需要安裝相關 package&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone http://github.com/wg-perception/object_recognition_core&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git clone http://github.com/wg-perception/linemod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git clone http://github.com/wg-perception/ork_renderer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ../ &amp;amp;&amp;amp; catkin_make&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;catkin_make&lt;/code&gt; 的過程中可能會碰到因 error 而中斷，會看到類似如下的訊息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/error_1.png&quot; alt=&quot;catkin_make_error_1&quot;&gt;&lt;/p&gt;
&lt;p&gt;這時候不要怕，繼續給他 &lt;code&gt;catkin_make&lt;/code&gt; 下去，你就會發現編譯進度會神奇地有進展：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/error_2.png&quot; alt=&quot;catkin_make_error_2&quot;&gt;&lt;/p&gt;
&lt;p&gt;不過我有碰到一個問題，再怎麼重新編譯都沒有用:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In file included from /home/rosindigo/catkin_ws/src/ork_renderer/src/renderer3d.cpp:50:0:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/home/rosindigo/catkin_ws/src/ork_renderer/src/renderer3d_impl_osmesa.h:39:23: fatal error: GL/osmesa.h: 沒有此一檔案或目錄&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #include &amp;lt;GL/osmesa.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; compilation terminated.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; make[2]: *** [ork_renderer/src/CMakeFiles/object_recognition_renderer_3d.dir/renderer3d.cpp.o] Error 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; make[1]: *** [ork_renderer/src/CMakeFiles/object_recognition_renderer_3d.dir/all] Error 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; make: *** [all] Error 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Invoking &amp;quot;make -j8 -l8&amp;quot; failed&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因為是少了 GL/osmesa.h，所以需要額外下一個指令 &lt;code&gt;sudo apt-get install libosmesa6-dev&lt;/code&gt; 來安裝。&lt;/p&gt;
&lt;p&gt;裝到這邊還會有一個問題，就是雖然編譯都已經過了，但 &lt;code&gt;roscd object_recognition_core&lt;/code&gt; 時都會出現無法找到此 package 的 error，由於這會對後續要執行演算法時造成問題，所以還是要來處理一下。&lt;/p&gt;
&lt;p&gt;我們先重新理一下思路，理論上，編譯過之後就會被加入到 &lt;code&gt;roscd&lt;/code&gt; 可以找到的 path 中，但是 &lt;code&gt;roscd&lt;/code&gt; 顯然就表示沒有被加進  ROS_PACKAGE_PATH 中，google 了一下發現到有人也遇過類似的問題，解法也確實就是把我們 git clone 下來的那些 package 加入到 ROS_PACKAGE_PATH 中，這樣的話問題就簡單啦!&lt;/p&gt;
&lt;p&gt; 先 &lt;code&gt;vim ~/.bashrc&lt;/code&gt; 一下，然後在最下面補上一行:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export ROS_PACKAGE_PATH=&amp;quot;$ROS_PACKAGE_PATH:/home/rosindigo/catkin_ws/src&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;補完的結果看起來就像:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/bashrc.png&quot; alt=&quot;bachrc&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;接上並從-RGB-D-Sensor-收資料&quot;&gt;&lt;a href=&quot;#接上並從-RGB-D-Sensor-收資料&quot; class=&quot;headerlink&quot; title=&quot;接上並從 RGB-D Sensor 收資料&quot;&gt;&lt;/a&gt;接上並從 RGB-D Sensor 收資料&lt;/h2&gt;&lt;p&gt;接下來我們要先處理感測器這塊，畢竟如果沒有感測器，那就根本不用辨識物體的對吧。原本官方教學上是建議用 &lt;code&gt;roslaunch openni2_launch openni2.launch&lt;/code&gt;，但因為我是用 Kinect 1，要用 &lt;code&gt;roslaunch openni_launch openni.launch&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;跑起來之後應該就可以在 Rviz 看到以下的畫面:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/kinect_rviz.png&quot; alt=&quot;kinect_rviz&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;安裝物體辨識資料庫-amp-加入-model&quot;&gt;&lt;a href=&quot;#安裝物體辨識資料庫-amp-加入-model&quot; class=&quot;headerlink&quot; title=&quot;安裝物體辨識資料庫 &amp;amp; 加入 model&quot;&gt;&lt;/a&gt;安裝物體辨識資料庫 &amp;amp; 加入 model&lt;/h2&gt;&lt;p&gt;ORK 是一套以 template matching 方法為主的辨識工具，也就是說，他會把感測器看到的物體跟資料庫中的物體比對，夠相似的就算是辨識成功，所以我們接著要來處理資料庫這一塊。首先要安裝 CouchDB 這個工具 (用 &lt;code&gt;sudo apt-get install couchdb&lt;/code&gt; )。&lt;/p&gt;
&lt;p&gt;接下來檢查一下是否有安裝成功 (用 &lt;code&gt;curl -X GET http://localhost:5984&lt;/code&gt; )。如果成功，應該會看到類似下面的畫面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/couchdb.png&quot; alt=&quot;curl_couchdb&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rosrun object_recognition_core object_add.py -n &amp;quot;coke &amp;quot; -d &amp;quot;A universal can of coke&amp;quot; --commit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;執行上面這個指令之後，你可以去 &lt;a href=&quot;http://localhost:5984/_utils/database.html?object_recognition/_design/objects/_view/by_object_name&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:5984/_utils/database.html?object_recognition/_design/objects/_view/by_object_name&lt;/a&gt; 看看自己的資料庫裡是否已經新增了這個物體：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/object_id.png&quot; alt=&quot;obj_id&quot;&gt;&lt;/p&gt;
&lt;p&gt;接下來就是要指定這個物體的 3D 模型是什麼，這邊就需要先下載個 package 並編譯。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/wg-perception/ork_tutorials&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd .. &amp;amp;&amp;amp; catkin_make&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ork_tutorials裡面有一個 coke.stl 檔，他就是一個可樂罐的 3D 模型，足夠讓我們先用來辨識。注意下面這個指令中有一串看起來像亂碼的東西，但那其實是物體的 id ，這就要從你自己的資料庫裡去看了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rosrun object_recognition_core mesh_add.py 0be612246c9b0a00baaa4adefb0009eb /home/rosindigo/catkin_ws/src/ork_tutorials/data/coke.stl --commit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;執行-Linemod-演算法-Training-amp-Detection&quot;&gt;&lt;a href=&quot;#執行-Linemod-演算法-Training-amp-Detection&quot; class=&quot;headerlink&quot; title=&quot;執行 Linemod 演算法 (Training &amp;amp; Detection)&quot;&gt;&lt;/a&gt;執行 Linemod 演算法 (Training &amp;amp; Detection)&lt;/h3&gt;&lt;p&gt;好了!終於要進入正題了，這一塊一樣有 &lt;a href=&quot;http://wg-perception.github.io/ork_tutorials/tutorial03/tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方tutorial&lt;/a&gt; 可以參考，我們先從 Training 開始。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rosrun object_recognition_core training -c `rospack find object_recognition_linemod`/conf/training.ork&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;這個 training 指令會利用資料庫裡的 3D 模型建立辨識時所需要的 template，如果執行成功，你會看到如下的訊息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/training.png&quot; alt=&quot;train&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果已經訓練完畢，下一步就是用他來辨識物體啦。&lt;/p&gt;
&lt;p&gt;可惜筆者的 Kinect 突然壞掉了，沒有辦法直接 demo 出來，不過這邊的指令也不會很複雜。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;roslaunch openni_launch openni.launch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosrun dynamic_reconfigure dynparam set /camera/driver depth_registration True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosrun dynamic_reconfigure dynparam set /camera/driver image_mode 2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosrun dynamic_reconfigure dynparam set /camera/driver depth_mode 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosrun topic_tools relay /camera/depth_registered/image_raw /camera/depth_registered/image&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rosrun object_recognition_core detection -c  `rospack find object_recognition_linemod`/conf/detection.ros.ork&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下來就可以用 Rviz 來看辨識結果啦！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/rviz_result.png&quot; alt=&quot;rviz_result&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;演算法簡介&quot;&gt;&lt;a href=&quot;#演算法簡介&quot; class=&quot;headerlink&quot; title=&quot;演算法簡介&quot;&gt;&lt;/a&gt;演算法簡介&lt;/h2&gt;&lt;p&gt;既然 Linemod 是一個這麼強大的演算法，試著去稍微了解一下演算法也是很合理的，原始的&lt;a href=&quot;http://campar.in.tum.de/pub/hinterstoisser2011linemod/hinterstoisser2011linemod.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;論文&lt;/a&gt;在這邊 (2011 ICCV 的 oral 論文)，以下的圖片也是出自這篇論文。&lt;/p&gt;
&lt;p&gt;首先來看一下這篇論文的辨識結果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/paper_1.jpg&quot; alt=&quot;result&quot;&gt;&lt;/p&gt;
&lt;p&gt;這個演算法的核心概念就是整合多種不同的 modalities，把 modality 想成物體的不同特徵可能比較好懂，例如下圖中就有兩種 modalities – gradient 跟 surface normal，而因為這兩種特徵所表達的特性不一樣，所以可以互補，進而達到更好的辨識效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/paper_2.jpg&quot; alt=&quot;concept&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以說，Linemod 需要先有已知的物體模型，然後先取得這個物體各種 modlaities 的template，這樣在辨識的時候就可以拿 template 來比對。&lt;/p&gt;
&lt;p&gt;不過這概念在電腦視覺領域中並不特別，因為同時使用不同特徵來加強物體辨識的效果是很直覺的，也有很多不同的方法可以做到這件事情，所以這篇論文還提出了一個方法來增進 similarity measurement 的效率 ( similarity measurement 的意思是 measure 儲存的 template 跟現在看到的影像資料有多接近)。&lt;/p&gt;
&lt;h2 id=&quot;總結&quot;&gt;&lt;a href=&quot;#總結&quot; class=&quot;headerlink&quot; title=&quot;總結&quot;&gt;&lt;/a&gt;總結&lt;/h2&gt;&lt;p&gt;這篇文章很簡略地介紹了 ORK 的安裝、基本的使用方式(使用 Linemod )、還有演算法簡介，有興趣的讀者可以自己動手玩玩看 (如果沒有實體的 RGB-D sensor，你也可以試著用 Gazebo 裡面的 Kinect 來模擬)!&lt;/p&gt;
&lt;h2 id=&quot;延伸閱讀&quot;&gt;&lt;a href=&quot;#延伸閱讀&quot; class=&quot;headerlink&quot; title=&quot;延伸閱讀&quot;&gt;&lt;/a&gt;延伸閱讀&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://wg-perception.github.io/ork_tutorials/tutorial02/tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 ORK 的 tabletop 演算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wg-perception.github.io/ork_tutorials/tutorial01/tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;建立自己的 ORK 模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vimeo.com/66584131&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ORK 開發者介紹演講&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Itseez/opencv_contrib/blob/master/modules/rgbd/src/linemod.cpp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linemod的OpenCV實作&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;https://pojenlai.wordpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@pojenlai&lt;/a&gt; 演算法工程師，對機器人跟電腦視覺有少許研究，最近在鍛鍊自己的執行力&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這次要介紹的工具是 ROS 裡面專門用來作物體辨識的 &lt;a href=&quot;http://wg-perception.github.io/obj
    
    </summary>
    
    
      <category term="機器人, 物體辨識, ROS, Object Recognition Kitchen, Linemod" scheme="http://blog.techbridge.cc/tags/%E6%A9%9F%E5%99%A8%E4%BA%BA-%E7%89%A9%E9%AB%94%E8%BE%A8%E8%AD%98-ROS-Object-Recognition-Kitchen-Linemod/"/>
    
  </entry>
  
  <entry>
    <title>從 Flux 與 MVC 的差異來簡介 Flux</title>
    <link href="http://blog.techbridge.cc/2016/04/29/introduce-flux-from-flux-and-mvc/"/>
    <id>http://blog.techbridge.cc/2016/04/29/introduce-flux-from-flux-and-mvc/</id>
    <published>2016-04-29T15:09:42.000Z</published>
    <updated>2016-06-08T12:25:42.000Z</updated>
    
    <content type="html">&lt;p&gt;今天這篇主要是想藉由&lt;code&gt;Flux&lt;/code&gt;的介紹，進而探討&lt;code&gt;Flux&lt;/code&gt;與&lt;code&gt;MVC&lt;/code&gt;的差異，到底&lt;code&gt;Flux&lt;/code&gt;做對了什麼，而&lt;code&gt;MVC&lt;/code&gt;又犯了什麼錯呢？&lt;/p&gt;
&lt;p&gt;首先我們回顧一下&lt;a href=&quot;https://www.youtube.com/watch?v=nYkdrAPrdcw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2014 F8大會 - Hacker Way&lt;/a&gt;的影片&lt;br&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;v=nYkdrAPrdcw&quot; target=&quot;_blank&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://img.youtube.com/vi/nYkdrAPrdcw/0.jpg&quot; alt=&quot;2014 F8大會 - Hacker Way&quot; width=&quot;240&quot; height=&quot;180&quot; border=&quot;10&quot;&gt;&lt;br&gt;&lt;/a&gt;&lt;br&gt;其中 Jing Chen 用了兩張圖來做對比，說明MVC的觀念在複雜的Application下難以維護。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/flux-react-mvc.png&quot; alt=&quot;facebook MVC&quot; title=&quot;facebook MVC&quot;&gt;&lt;/p&gt;
&lt;p&gt;經驗豐富一點的Developer看到這張圖的第一個念頭應該會是：”What the fxxx… 誰家的MVC長這樣啊？” 沒錯！Jing Chen 事後在Reddit上也有回覆，主要是想利用這張圖把MVC在大型架構下，資料 與 視圖 之間的 &lt;code&gt;bi-directional data flow&lt;/code&gt;，容易造成&lt;code&gt;cascading effects&lt;/code&gt;的問題凸顯出來。&lt;/p&gt;
&lt;p&gt;為了解決她說的這個問題，Facebook 提出了&lt;code&gt;Flux&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Flux&quot;&gt;&lt;a href=&quot;#Flux&quot; class=&quot;headerlink&quot; title=&quot;Flux&quot;&gt;&lt;/a&gt;Flux&lt;/h2&gt;&lt;p&gt;Flux是一種讓你很容易做到 one-way data flow 的&lt;span style=&quot;color:red&quot;&gt;概念&lt;/span&gt;，讓你View中的每個component的state都能夠&lt;code&gt;predictable&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/flux-react.png&quot; alt=&quot;facebook Flux&quot; title=&quot;facebook Flux&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Views-Dispatch-Actions&quot;&gt;&lt;a href=&quot;#Views-Dispatch-Actions&quot; class=&quot;headerlink&quot; title=&quot;Views Dispatch Actions&quot;&gt;&lt;/a&gt;Views Dispatch Actions&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Dispatcher&lt;/code&gt;是一個重要的event system，用來broadcast events以及registers callbacks，一般來說Dispatcher是唯一且global的，可以參考Facebook的&lt;a href=&quot;https://github.com/facebook/flux/blob/master/src/Dispatcher.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dispatcher Library&lt;/a&gt;（題外話，有許多一些Flux的framework並非這樣使用）&lt;/p&gt;
&lt;p&gt;簡單來看個Dispatcher的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 假設你initiate一個dispatcher&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; AppDispatcher = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dispatcher();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在你的 component.jsx 中，可能會有這樣的程式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;createNewItem: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; evt &lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  AppDispatcher.dispatch(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    actionName: &lt;span class=&quot;string&quot;&gt;&#39;newPhoto&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    newItem: &amp;#123; name: &lt;span class=&quot;string&quot;&gt;&#39;Happy Holiday&#39;&lt;/span&gt; &amp;#125; &lt;span class=&quot;comment&quot;&gt;// example data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;this.createNewItem&lt;/span&gt; &amp;#125;&amp;gt;&lt;/span&gt;New Photo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;當每次的&lt;code&gt;onClick&lt;/code&gt;發生後，&lt;code&gt;View&lt;/code&gt;就會透過&lt;code&gt;Dispatcher&lt;/code&gt;dispatch出一個&lt;code&gt;Action&lt;/code&gt;，該Action可以包含一個&lt;code&gt;payload&lt;/code&gt;，說明&lt;code&gt;你想做什麼事情&lt;/code&gt;以及&lt;code&gt;你需要操作什麼資料&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Store-Responds-to-Dispatched-Actions&quot;&gt;&lt;a href=&quot;#Store-Responds-to-Dispatched-Actions&quot; class=&quot;headerlink&quot; title=&quot;Store Responds to Dispatched Actions&quot;&gt;&lt;/a&gt;Store Responds to Dispatched Actions&lt;/h3&gt;&lt;p&gt;Store在Flux的架構內，通常是Singleton(一樣，有些framework並非這樣做，尤其是想達成isomorphic時，可以參考&lt;a href=&quot;http://fluxible.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yahoo Fluxible&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;在Flux的概念中，Store基本上是你唯一可以&lt;strong&gt;操作資料&lt;/strong&gt;與&lt;strong&gt;儲存資料&lt;/strong&gt;的地方。去除操作資料的部分，聽起來有點像MVC中的Model? 更明確一點來說，&lt;strong&gt;Store contains Models&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;舉例來說，當你需要存放一些照片以及其Meta data時，你會Create一個PhotoStore來存放Photo model與Meta model。你會依照資料的&lt;code&gt;Domain&lt;/code&gt;來切割你的Store。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; PhotoStore = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// collection of model data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  photos: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AppDispatcher.register(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;payload&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;( payload.actionName ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;newPhoto&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      PhotoStore.photos.push(payload.newPhoto);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Store&lt;/code&gt;會向&lt;code&gt;Dispatcher&lt;/code&gt;註冊&lt;code&gt;Callback&lt;/code&gt;，依照各種action的類別執行相對應的資料操作。&lt;/p&gt;
&lt;h3 id=&quot;Store-Emits-“Change”-Event-to-View&quot;&gt;&lt;a href=&quot;#Store-Emits-“Change”-Event-to-View&quot; class=&quot;headerlink&quot; title=&quot;Store Emits “Change” Event to View&quot;&gt;&lt;/a&gt;Store Emits “Change” Event to View&lt;/h3&gt;&lt;p&gt;當你的Store資料做完更新後，要告訴前端頁面去刷新視圖，通常可以在Store註冊的Callback中執行以下動作：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AppDispatcher.register(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;payload&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;( payload.actionName ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;newPhoto&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      PhotoStore.photos.push(payload.newPhoto);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// trigger &quot;Change&quot; event 通知View去做更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      PhotoStore.trigger(&lt;span class=&quot;string&quot;&gt;&#39;change&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接著，如果你是搭配React當作你的View的話，可能會在&lt;code&gt;componentDidMount&lt;/code&gt;時，binding一個Store listener&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;componentDidMount: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PhotoStore.bind( &lt;span class=&quot;string&quot;&gt;&#39;change&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.photoChange );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在listener中重新fetch store資料，並且setState來re-render Component&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;photoChange: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newPhotoData = PhotoStore.getPhoto();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      photos: newPhotoData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你的Component的render function大概會像這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; photosComponet = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.photos.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;photo, i&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;&lt;/span&gt;&#39;&lt;span class=&quot;attr&quot;&gt;photo&lt;/span&gt;&#39;+&lt;span class=&quot;attr&quot;&gt;i&lt;/span&gt;&amp;#125;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;photo&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;photosComponet&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看完簡單的Flux介紹後，讓我們再複習一次Flux的流程圖&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/flux-react.png&quot; alt=&quot;facebook Flux&quot; title=&quot;facebook Flux&quot;&gt;&lt;/p&gt;
&lt;p&gt;相信在業界打滾多年的Developer們應該早有疑惑了，Flux的那張圖，跟最原始的MVC圖不是很像嗎？！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/500px-MVC-Process.svg.png&quot; alt=&quot;MVC definition in wikipedia&quot; title=&quot;MVC definition in wikipedia&quot;&gt;&lt;/p&gt;
&lt;p&gt;User操作View所產生的任何event，都會經由Controller來修改與更動相關的Model，而Model再告知View是否需要做更動，聽起來也是蠻&lt;code&gt;one-way direction&lt;/code&gt;的呀。&lt;/p&gt;
&lt;p&gt;事實上，MVC 跟 Flux 都只是一個概念，因此有各種不同的實作，加上MVC在&lt;code&gt;資料流&lt;/code&gt;的處理上，並不像Flux一般有較為明確的定義，多數時候Model的更動與View的刷新可能會透過Controller來管理，讓Model單純存放data。&lt;/p&gt;
&lt;p&gt;如此一來，假若今天View的操作更動了Model，而Model的變化又刷新了View，在系統龐大的時候，一來一往，就會讓你的資料與頁面狀態變得非常複雜，要追蹤某個頁面的變動到底是誰觸發的，或是哪個資料改變了，你必須從Controller去慢慢trace。而若是遵照Flux的流程，任何View的update都只要去追蹤其State的來源Store即可，有一個明確的flow可以遵循，並且每個View所需要監聽的資料來源，可以依照Store來區分，這之間的資料流不會互相干擾。&lt;br&gt;另外一個Flux的好處是，能夠更輕鬆的做出更Unit的Unit test。這是你在複雜的Controller中難以達成的。&lt;/p&gt;
&lt;p&gt;當然，你可能會想：“這是你MVC用得不好“。 &lt;/p&gt;
&lt;p&gt;我覺得這樣講也沒什麼不對，如果你MVC用得很熟很順手，的確單單是Flux這個東西對你的誘因可能不高，但當一間明星公司大力Promote，對於基本概念的定義又夠清楚單純時，還是值得你試試。更別說Flux搭配上React的宣告式寫法，用起來更是如魚得水。&lt;/p&gt;
&lt;h3 id=&quot;結論&quot;&gt;&lt;a href=&quot;#結論&quot; class=&quot;headerlink&quot; title=&quot;結論&quot;&gt;&lt;/a&gt;結論&lt;/h3&gt;&lt;p&gt;Flux做的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;改善&lt;code&gt;資料狀態&lt;/code&gt;與&lt;code&gt;視圖狀態&lt;/code&gt;的 Data Flow&lt;/li&gt;
&lt;li&gt;讓頁面的狀態&lt;code&gt;Predictable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;資料流不會互相污染&lt;/li&gt;
&lt;li&gt;讓你的測試更加容易&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而MVC在關注點分離上的貢獻不可小覷，重視在將資料(Model)、視圖(View)、邏輯(Controller)拆開，各自負責各自的工作。&lt;/p&gt;
&lt;p&gt;因此並非是MVC不好、不對，所以我們應該採用Flux；Flux是在MVC建立的基礎下，定義出一個清楚的&lt;code&gt;one-way direction&lt;/code&gt;資料流，並且透過&lt;code&gt;Action&lt;/code&gt;、&lt;code&gt;Dispatcher&lt;/code&gt;與&lt;code&gt;Store&lt;/code&gt;來幫助整個概念的實現。&lt;/p&gt;
&lt;h3 id=&quot;One-more-thing&quot;&gt;&lt;a href=&quot;#One-more-thing&quot; class=&quot;headerlink&quot; title=&quot;One more thing&quot;&gt;&lt;/a&gt;One more thing&lt;/h3&gt;&lt;p&gt;如同前面所提，Flux的實作有很多種，這邊介紹的只是最基本的流程，很多Framework在設計自己的Dispatcher, Action 與 Store時，會有不同的方式，或許可以從這邊的比較下去看看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/voronianski/flux-comparison&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flux Comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/enaqx/awesome-react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Awesome React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;參考資料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.andrewray.me/flux-for-stupid-people/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flux for stupid people&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/news/2014/05/facebook-mvc-flux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Facebook: MVC Does Not Scale, Use Flux Instead&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;http://blog.arvinh.info/about/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@arvinh&lt;/a&gt; 前端攻城獅，熱愛數據分析和資訊視覺化&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天這篇主要是想藉由&lt;code&gt;Flux&lt;/code&gt;的介紹，進而探討&lt;code&gt;Flux&lt;/code&gt;與&lt;code&gt;MVC&lt;/code&gt;的差異，到底&lt;code&gt;Flux&lt;/code&gt;做對了什麼，而&lt;code&gt;MVC&lt;/code&gt;又犯了什麼錯呢？&lt;/p&gt;
&lt;p&gt;首先我們回顧
    
    </summary>
    
    
      <category term="Flux, React, MVC" scheme="http://blog.techbridge.cc/tags/Flux-React-MVC/"/>
    
  </entry>
  
  <entry>
    <title>用 Node.js 快速打造 RESTful API</title>
    <link href="http://blog.techbridge.cc/2016/04/23/fast-restful-nodejs-api-backend/"/>
    <id>http://blog.techbridge.cc/2016/04/23/fast-restful-nodejs-api-backend/</id>
    <published>2016-04-23T01:58:08.000Z</published>
    <updated>2016-05-14T03:01:44.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;現今有些網站採用了 Single Page Application 的方案，後端只負責提供 API 讓前端抓取資料，達成完全的前後端分離。前端的選擇有很多種，你可以用 &lt;code&gt;Angular&lt;/code&gt;，可以用 &lt;code&gt;Ember.js&lt;/code&gt;，也可以用 &lt;code&gt;React + Redux&lt;/code&gt;。至於後端的 API，必須符合固定格式，才能讓前端的人員比較好抓取。而這個「固定格式」，最常見的就是我們今天的重點：&lt;code&gt;RESTful&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;什麼是-RESTful？&quot;&gt;&lt;a href=&quot;#什麼是-RESTful？&quot; class=&quot;headerlink&quot; title=&quot;什麼是 RESTful？&quot;&gt;&lt;/a&gt;什麼是 RESTful？&lt;/h2&gt;&lt;p&gt;與起從硬生生的文字解釋下手，不如先從實際範例著手。假設現在你要寫一個部落格網站的後端 API，十個人可能會有十種寫法；例如說「抓取所有文章」這個功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;/api/blog/getList&lt;/li&gt;
&lt;li&gt;/api/blog/getAllArticle&lt;/li&gt;
&lt;li&gt;/api/blog/article/getAll&lt;/li&gt;
&lt;li&gt;/api/blog/fetchAll&lt;/li&gt;
&lt;li&gt;/api/blog/all&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但如果是採取 &lt;code&gt;RESTful&lt;/code&gt; 的方案，就會符合一定的格式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;所有文章&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/posts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;單一文章&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/posts/:id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;新增文章&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/api/posts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;刪除文章&lt;/td&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/posts/:id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;修改文章&lt;/td&gt;
&lt;td&gt;PUT/PATCH&lt;/td&gt;
&lt;td&gt;/api/posts/:id&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在這個例子裡，文章（posts）是一個 &lt;code&gt;Resource&lt;/code&gt;，你可以透過 HTTP 提供的幾種方法搭配不同的 URL 存取這個 &lt;code&gt;Resource&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你對 &lt;code&gt;RESTful&lt;/code&gt; 很有興趣，這邊是一些值得參考的文章：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://ihower.tw/blog/archives/1542&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;什麼是REST跟RESTful?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.toright.com/posts/725&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;淺談 REST 軟體架構風格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/09/restful.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解RESTful架構&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;ORM&quot;&gt;&lt;a href=&quot;#ORM&quot; class=&quot;headerlink&quot; title=&quot;ORM&quot;&gt;&lt;/a&gt;ORM&lt;/h2&gt;&lt;p&gt;ORM 的全稱是：Object Relational Mapping&lt;br&gt;如果以資料庫來說的話，就是把你的資料庫對應到程式裡的物件。舉上面的部落格的例子，你的資料庫 table 可能是這樣：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;欄位&lt;/th&gt;
&lt;th&gt;類型&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;title&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;標題&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;content&lt;/td&gt;
&lt;td&gt;text&lt;/td&gt;
&lt;td&gt;內文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;created_at&lt;/td&gt;
&lt;td&gt;timestamp&lt;/td&gt;
&lt;td&gt;建立時間&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;對應到 Node.js 裡面的物件，你可以這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 建立文章&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Post.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title: &lt;span class=&quot;string&quot;&gt;&#39;Hello Excel&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  content: &lt;span class=&quot;string&quot;&gt;&#39;測試&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 刪除 id 為 1 的文章&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Post.find(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).delete();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是說，你今天根本不用管背後的資料庫用的是哪一種，也不用管 table 的名稱到底是什麼，你只要對你知道的這個 &lt;code&gt;Post&lt;/code&gt; 物件做操作即可。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.sequelizejs.com/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sequelize&lt;/a&gt;是一套很好用的 ORM Library，只要先定義好一份&lt;code&gt;schema&lt;/code&gt;，就可以幫你把物件跟資料庫關連起來。&lt;/p&gt;
&lt;h2 id=&quot;為什麼突然提到-ORM？&quot;&gt;&lt;a href=&quot;#為什麼突然提到-ORM？&quot; class=&quot;headerlink&quot; title=&quot;為什麼突然提到 ORM？&quot;&gt;&lt;/a&gt;為什麼突然提到 ORM？&lt;/h2&gt;&lt;p&gt;有些讀者可能已經想到，其實 RESTful API 跟 ORM 之間，是有某種程度的關聯的。怎麼說呢？  &lt;/p&gt;
&lt;p&gt;假設我今天要寫一個留言板的後端 API，而且我又同時採用 RESTful 跟 ORM，我的程式就會長這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 抓取所有留言&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// GET /api/messages&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Message.findAll();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 抓取單一留言&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// GET /api/messages/:id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Message.find(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 新增留言&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// POST /api/messages&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Messages.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  content: content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 刪除留言&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// DELETE /api/messages/:id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Messages.find(id).delete();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 修改留言&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// PUT /api/messages/:id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Messages.find(id).update(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  content: new_content&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那如果我今天是寫一個部落格的後端 API 呢？&lt;br&gt;把上面的 messages 全部換成 posts，搞定！&lt;br&gt;從以上例子可以看出，其實這兩樣東西是很適合搭配在一起的，因為兩個都能夠符合差不多的規則。&lt;/p&gt;
&lt;h2 id=&quot;兩個願望一次滿足，epilogue&quot;&gt;&lt;a href=&quot;#兩個願望一次滿足，epilogue&quot; class=&quot;headerlink&quot; title=&quot;兩個願望一次滿足，epilogue&quot;&gt;&lt;/a&gt;兩個願望一次滿足，epilogue&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dchester/epilogue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;epilogue&lt;/a&gt; 是一套 Node.js 的 Library，它結合了 &lt;code&gt;Sequelize&lt;/code&gt; 跟 &lt;code&gt;Express&lt;/code&gt;，主要目的就是讓我們能快速打造出 RESTful 的 API。&lt;/p&gt;
&lt;p&gt;讓我們直接來看看官網的範例：&lt;/p&gt;
&lt;p&gt;首先，你要先定義好的資料庫，跟你的 schema&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; database = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Sequelize(&lt;span class=&quot;string&quot;&gt;&#39;database&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; User = database.define(&lt;span class=&quot;string&quot;&gt;&#39;User&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  username: Sequelize.STRING,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  birthday: Sequelize.DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再來，初始化 express 跟 epilogue&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;express&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bodyParser = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;body-parser&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(bodyParser.json());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.use(bodyParser.urlencoded(&amp;#123; extended: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server = http.createServer(app);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;epilogue.initialize(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	app: app,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sequelize: database&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最後，靠 epilogue 把 url 跟資料庫關連起來，你要提供它你想要的 endpoint 跟要關連的 model&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; userResource = epilogue.resource(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  model: User,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  endpoints: [&lt;span class=&quot;string&quot;&gt;&#39;/users&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;/users/:id&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是這樣簡單三個步驟，你就有了一個 RESTful API！是不是很簡單呢？&lt;/p&gt;
&lt;h2 id=&quot;還不只這樣&quot;&gt;&lt;a href=&quot;#還不只這樣&quot; class=&quot;headerlink&quot; title=&quot;還不只這樣&quot;&gt;&lt;/a&gt;還不只這樣&lt;/h2&gt;&lt;p&gt;在實際的開發過程中，其實往往沒有那麼順利，例如說你的回傳格式可能跟資料庫的格式不一樣，或是你的某些 API 需要經過認證才能呼叫。沒關係，epilogue 都幫你想好了。&lt;/p&gt;
&lt;p&gt;epilogue 提供了七種行為的 hook，包括 start, auth, fetch, data, write, send, complete，再搭配上 before, action, after 三種，你可以在任何一個階段做你想做的事情。&lt;/p&gt;
&lt;p&gt;例如說你想在傳回結果之前做一點小小的變更，就是&lt;code&gt;userResource.list.send.before&lt;/code&gt;，或是你可能想對某個 API 做驗證，那就是&lt;code&gt;userResource.delete.auth&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;這邊提供兩個官網的完整範例：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 禁止刪除 user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userResource.delete.auth(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res, context&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ForbiddenError(&lt;span class=&quot;string&quot;&gt;&quot;can&#39;t delete a user&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 先看有沒有 cache，有的話直接返回 cache 的內容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userResource.list.fetch.before(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res, context&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance = cache.get(context.criteria);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (instance) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// keep a reference to the instance and skip the fetch&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context.instance = instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; context.skip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// cache miss; we continue on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; context.continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;總結&quot;&gt;&lt;a href=&quot;#總結&quot; class=&quot;headerlink&quot; title=&quot;總結&quot;&gt;&lt;/a&gt;總結&lt;/h2&gt;&lt;p&gt;若是你的後端 API 沒有很複雜，都是基本的 CRUD 的話，那 epilogue 絕對是很適合你的一套框架，只要你把資料庫的 schema 開出來，程式碼複製貼上一下就能夠完成一個 API。若是讀者之後有相關的需求，不妨試試看吧！&lt;/p&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;http://huli.logdown.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@huli&lt;/a&gt; 野生工程師，相信分享與交流能讓世界變得更美好&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;現今有些網站採用了 Single Page Application 的方案，後端只負責提供 API 讓前端抓取資料，達成完全的前後端分離。前
    
    </summary>
    
    
      <category term="Nodejs, RESTful, epilogue, Sequelize, Express" scheme="http://blog.techbridge.cc/tags/Nodejs-RESTful-epilogue-Sequelize-Express/"/>
    
  </entry>
  
  <entry>
    <title>一看就懂的 JSX 簡明入門教學指南</title>
    <link href="http://blog.techbridge.cc/2016/04/21/react-jsx-introduction/"/>
    <id>http://blog.techbridge.cc/2016/04/21/react-jsx-introduction/</id>
    <published>2016-04-21T15:26:00.000Z</published>
    <updated>2016-06-08T12:25:42.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/img/kdchang/reactjs.png&quot; alt=&quot;一看就懂的 JSX 簡明入門教學指南&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;根據 &lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt; 官方定義，React 是一個構建使用者介面的 JavaScritp Library。以 MVC 模式來說，ReactJS 主要是負責 View 的部份。過去一段時間，我們被灌輸了許多前端分離的觀念，在前端三兄弟中（或三姊妹、三劍客）：HTML 掌管內容結構、CSS 負責外觀樣式，JavaScript 主管邏輯互動，千萬不要混在一塊。然而，在 React 世界裡，所有事物都是 以 Component 為基礎，將同一個 Compoent 相關的程式和資源都放在一起，而在撰寫 React Component 時我們通常會使用 &lt;a href=&quot;https://facebook.github.io/jsx/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSX&lt;/a&gt; 的方式來提升程式撰寫效率。事實上，JSX 並非一種全新的語言，而是一種語法糖（&lt;a href=&quot;https://en.wikipedia.org/wiki/Syntactic_sugar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Syntatic Sugar&lt;/a&gt;），一種語法類似 &lt;a href=&quot;https://zh.wikipedia.org/wiki/XML&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XML&lt;/a&gt; 的 ECMAScript 語法擴充。在 JSX 中 HTML 和組建這些元素標籤的程式碼有緊密的關係。因此你可能要熟悉一下以 Component 為單位的思考方式（本文主要使用 ES6 語法）。&lt;/p&gt;
&lt;p&gt;此外，React 和 JSX 的思維在於善用 JavaScript 的強大能力，放棄蹩腳的模版語言，這和 &lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Angular&lt;/a&gt; 強化 HTML 的理念也有所不同。當然 JSX 並非強制使用，你也可以選擇不用，因為最終 JSX 的內容會轉化成 JavaScript（瀏覽器只看的懂 JavaScript）。不過等你閱讀完接下來的內容，你或許會開始發現 JSX 的好，認真考慮使用 JSX 的語法。&lt;/p&gt;
&lt;h2 id=&quot;一、使用-JSX-的好處&quot;&gt;&lt;a href=&quot;#一、使用-JSX-的好處&quot; class=&quot;headerlink&quot; title=&quot;一、使用 JSX 的好處&quot;&gt;&lt;/a&gt;一、使用 JSX 的好處&lt;/h2&gt;&lt;h3 id=&quot;1-提供更加語意化且易懂的標籤&quot;&gt;&lt;a href=&quot;#1-提供更加語意化且易懂的標籤&quot; class=&quot;headerlink&quot; title=&quot;1. 提供更加語意化且易懂的標籤&quot;&gt;&lt;/a&gt;1. 提供更加語意化且易懂的標籤&lt;/h3&gt;&lt;p&gt;由於 JSX 類似 XML 的語法，讓一些非開發人員也更容易看懂，且能精確定義包含屬性的樹狀結構。一般來說我們想做一個回饋表單，使用 HTML 寫法通常會長這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;messageBox&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;textarea&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;teextarea&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;from&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 JSX，就像 XML 語法結構一樣可以自行定義標籤且有開始和關閉，容易理解：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;MessageBox /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;React 思路認為使用 Component 比起模版（Template）和顯示邏輯（Display Logic）更能實現關注點分離的概念，而搭配 JSX 可以實現聲明式 &lt;code&gt;Declarative&lt;/code&gt;（注重 what to），而非命令式  &lt;code&gt;Imperative&lt;/code&gt;（注重 how to）的程式撰寫方式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/kdchang/fb_like.jpg&quot; alt=&quot;Facebook 上面按讚功能&quot;&gt;&lt;/p&gt;
&lt;p&gt;以 Facebook 上面按讚功能來說，若是命令式 &lt;code&gt;Imperative&lt;/code&gt; 寫法大約會是長這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(userLikes()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!hasBlueLike()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    removeGrayLike();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    addBlueLike();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(hasBlueLike()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    removeBlueLike();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    addGrayLike();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若是聲明式 &lt;code&gt;Declarative&lt;/code&gt; 則是會長這樣：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.liked) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;BlueLike&lt;/span&gt; /&amp;gt;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return (&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;GrayLike&lt;/span&gt; /&amp;gt;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看完上述說明是不是感覺 &lt;code&gt;React&lt;/code&gt; 結合 &lt;code&gt;JSX&lt;/code&gt; 的寫法更易讀易懂？事實上，當 Component 組成越來越複雜時，若使用 JSX 將可以讓整個結構更加直觀，可讀性較高。&lt;/p&gt;
&lt;h3 id=&quot;2-更加簡潔&quot;&gt;&lt;a href=&quot;#2-更加簡潔&quot; class=&quot;headerlink&quot; title=&quot;2. 更加簡潔&quot;&gt;&lt;/a&gt;2. 更加簡潔&lt;/h3&gt;&lt;p&gt;雖然最終 JSX 會轉換成 JavaScript，但使用 JSX 可以讓程式看起來更加簡潔，以下為使用 JSX 和不使用 JSX 的範例：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://facebook.github.io/react/&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不使用 JSX 的情況（記得我們說過 JSX 是選用的）：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// React.createElement(元件/HTML標籤, 元件屬性，以物件表示, 子元件)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;React.createElement(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &amp;#123;href: &lt;span class=&quot;string&quot;&gt;&#39;https://facebook.github.io/react/&#39;&lt;/span&gt;&amp;#125;, &lt;span class=&quot;string&quot;&gt;&#39;Hello!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-結合原生-JavaScript-語法&quot;&gt;&lt;a href=&quot;#3-結合原生-JavaScript-語法&quot; class=&quot;headerlink&quot; title=&quot;3. 結合原生 JavaScript 語法&quot;&gt;&lt;/a&gt;3. 結合原生 JavaScript 語法&lt;/h3&gt;&lt;p&gt;JSX 並非一種全新的語言，而是一種語法糖（Syntatic Sugar），一種語法類似 XML 的 ECMAScript 語法擴充，所以並沒有改變 JavaScript 語意。透過結合 JavaScript ，可以釋放 JavaScript 語言本身能力。下面例子就是運用 &lt;code&gt;map&lt;/code&gt; 方法和 &lt;code&gt;Arrow function&lt;/code&gt;，輕易把 &lt;code&gt;result&lt;/code&gt; 值迭代出來，產生無序清單（ul）的內容，不用再使用蹩腳的模版語言：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// const 為常數&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; lists = [&lt;span class=&quot;string&quot;&gt;&#39;JavaScript&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Java&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Node&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloMessage&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Compoent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;lists.map((result) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return (&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;result&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;二、JSX-用法摘要&quot;&gt;&lt;a href=&quot;#二、JSX-用法摘要&quot; class=&quot;headerlink&quot; title=&quot;二、JSX 用法摘要&quot;&gt;&lt;/a&gt;二、JSX 用法摘要&lt;/h2&gt;&lt;h3 id=&quot;1-環境設定與使用方式&quot;&gt;&lt;a href=&quot;#1-環境設定與使用方式&quot; class=&quot;headerlink&quot; title=&quot;1. 環境設定與使用方式&quot;&gt;&lt;/a&gt;1. 環境設定與使用方式&lt;/h3&gt;&lt;p&gt;初步了解為何要使用 JSX 後，我們來聊聊 JSX 的用法。一般而言 JSX 通常有兩種使用方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;a href=&quot;http://browserify.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;browserify&lt;/a&gt; 或 &lt;a href=&quot;https://webpack.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack&lt;/a&gt; 等 &lt;a href=&quot;https://en.wikipedia.org/wiki/CommonJS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CommonJS&lt;/a&gt; bundler 並整合 &lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;babel&lt;/a&gt; 預處理&lt;/li&gt;
&lt;li&gt;於瀏覽器端做解析&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在這邊簡單起見，我們先使用第二種方式，先讓大家專注熟悉 JSX 語法使用，等到後面章節再教大家使用 bundler 的方式去做解析（可以試著把下面的原始碼貼到 &lt;a href=&quot;http://jsbin.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSbin&lt;/a&gt; 的 HTML 看結果）：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello React!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 請先於 index.html 中引入 react.js, react-dom.js 和 babel-core 的 browser.min.js --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.0.1/react.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/react/15.0.1/react-dom.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;example&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/babel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 程式碼寫在這邊！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ReactDOM.render(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;example&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一般載入 JSX 方式有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;內嵌&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/babel&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ReactDOM.render(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;example&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;從外部引入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/jsx&amp;quot; src=&amp;quot;main.jsx&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; &lt;/p&gt;
&lt;h3 id=&quot;2-標籤用法&quot;&gt;&lt;a href=&quot;#2-標籤用法&quot; class=&quot;headerlink&quot; title=&quot;2. 標籤用法&quot;&gt;&lt;/a&gt;2. 標籤用法&lt;/h3&gt;&lt;p&gt;JSX 標籤非常類似 XML ，可以直接書寫。一般 Component 命名首字大寫，HTML Tags 小寫。以下是一個建立 Component 的 class：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloMessage&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Compoent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello React!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;MessageList&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-轉換成-JavaScript&quot;&gt;&lt;a href=&quot;#3-轉換成-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;3. 轉換成 JavaScript&quot;&gt;&lt;/a&gt;3. 轉換成 JavaScript&lt;/h3&gt;&lt;p&gt;JSX 最終會轉換成瀏覽器可以讀取的 JavaScript，以下為其規則：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;React.createElement(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  string/ReactClass, &lt;span class=&quot;comment&quot;&gt;// 表示 HTML 元素或是 React Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [object props], &lt;span class=&quot;comment&quot;&gt;// 屬性值，用物件表示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [children] &lt;span class=&quot;comment&quot;&gt;// 接下來參數皆為元素子元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解析前（特別注意在 JSX 中使用 JavaScript 表達式時使用 {} 括起，如下方範例的 &lt;code&gt;text&lt;/code&gt;，裡面對應的是變數。若需希望放置一般文字，請加上 &lt;code&gt;&amp;#39;&amp;#39;&lt;/code&gt;）：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;string&quot;&gt;&#39;Hello React&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;text&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;h1&amp;gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;&amp;#125;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/h1&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解析完後：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;string&quot;&gt;&#39;Hello React&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;React.createElement(&lt;span class=&quot;string&quot;&gt;&quot;h1&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Hello React!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外要特別要注意的是由於 JSX 最終會轉成 JavaScript 且每一個 JSX 節點都對應到一個 JavaScript 函數，所以在 Component 的 &lt;code&gt;render&lt;/code&gt; 方法中只能回傳一個根節點（Root Nodes）。例如：若有多個 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要 &lt;code&gt;render&lt;/code&gt; 請在外面包一個 Component 或 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 元素。&lt;/p&gt;
&lt;h3 id=&quot;4-註解&quot;&gt;&lt;a href=&quot;#4-註解&quot; class=&quot;headerlink&quot; title=&quot;4. 註解&quot;&gt;&lt;/a&gt;4. 註解&lt;/h3&gt;&lt;p&gt;由於 JSX 最終會編譯成 JavaScript，註解也一樣使用 &lt;code&gt;//&lt;/code&gt; 和 &lt;code&gt;/**/&lt;/code&gt; 當做註解方式：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 單行註解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  多行註解&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; content = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;List&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;/* 若是在子元件註解要加 &amp;#123;&amp;#125;  */&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        /* 多行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           註解&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           喔 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;window.isLoggedIn&lt;/span&gt; ? &lt;span class=&quot;attr&quot;&gt;window.name&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:&lt;/span&gt; &#39;&#39;&amp;#125; // 單行註解&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;List&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;5-屬性&quot;&gt;&lt;a href=&quot;#5-屬性&quot; class=&quot;headerlink&quot; title=&quot;5. 屬性&quot;&gt;&lt;/a&gt;5. 屬性&lt;/h3&gt;&lt;p&gt;在 HTML 中，我們可以透過標籤上的屬性來改變標籤外觀樣式，在 JSX 中也可以，但要注意 &lt;code&gt;class&lt;/code&gt; 和 &lt;code&gt;for&lt;/code&gt; 由於為 JavaScript 保留關鍵字用法，因此在 JSX 中使用 &lt;code&gt;className&lt;/code&gt; 和 &lt;code&gt;htmlFor&lt;/code&gt; 替代。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloMessage&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Compoent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;message&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello React!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Boolean-屬性&quot;&gt;&lt;a href=&quot;#Boolean-屬性&quot; class=&quot;headerlink&quot; title=&quot;Boolean 屬性&quot;&gt;&lt;/a&gt;Boolean 屬性&lt;/h4&gt;&lt;p&gt;在 JSX 中預設只有屬性名稱但沒設值為 &lt;code&gt;true&lt;/code&gt;，例如以下第一個 input 標籤 &lt;code&gt;disabled&lt;/code&gt; 雖然沒設值，但結果和下面的 input 為相同：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;disabled&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;disabled&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;true&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;反之，若是沒有屬性，則預設預設為 &lt;code&gt;false&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;disabled&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;false&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;6-擴展屬性&quot;&gt;&lt;a href=&quot;#6-擴展屬性&quot; class=&quot;headerlink&quot; title=&quot;6. 擴展屬性&quot;&gt;&lt;/a&gt;6. 擴展屬性&lt;/h3&gt;&lt;p&gt;在 ES6 中使用 &lt;code&gt;...&lt;/code&gt; 是迭代物件的意思，可以把所有物件對應的值迭代出來設定屬性，但要注意後面設定的屬性會蓋掉前面相同屬性：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; props = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  style: &lt;span class=&quot;string&quot;&gt;&quot;width:20px&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  className: &lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  value: &lt;span class=&quot;string&quot;&gt;&quot;yo&quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;HelloMessage  &amp;#123;...props&amp;#125; value=&lt;span class=&quot;string&quot;&gt;&quot;yo&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等於以下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;React.createElement(&lt;span class=&quot;string&quot;&gt;&quot;h1&quot;&lt;/span&gt;, React._spread(&amp;#123;&amp;#125;, props, &amp;#123;value: &lt;span class=&quot;string&quot;&gt;&quot;yo&quot;&lt;/span&gt;&amp;#125;), &lt;span class=&quot;string&quot;&gt;&quot;Hello React!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;7-自定義屬性&quot;&gt;&lt;a href=&quot;#7-自定義屬性&quot; class=&quot;headerlink&quot; title=&quot;7. 自定義屬性&quot;&gt;&lt;/a&gt;7. 自定義屬性&lt;/h3&gt;&lt;p&gt;若是希望使用自定義屬性，可以使用 &lt;code&gt;data-&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;HelloMessage data-attr=&lt;span class=&quot;string&quot;&gt;&quot;xd&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;8-顯示-HTML&quot;&gt;&lt;a href=&quot;#8-顯示-HTML&quot; class=&quot;headerlink&quot; title=&quot;8. 顯示 HTML&quot;&gt;&lt;/a&gt;8. 顯示 HTML&lt;/h3&gt;&lt;p&gt;通常為了避免資訊安全問題，我們會過濾掉 HTML，若需要顯示的話可以使用：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;_html: &#39;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello World!!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&#39;&amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;9-樣式使用&quot;&gt;&lt;a href=&quot;#9-樣式使用&quot; class=&quot;headerlink&quot; title=&quot;9. 樣式使用&quot;&gt;&lt;/a&gt;9. 樣式使用&lt;/h3&gt;&lt;p&gt;在 JSX 中使用外觀樣式方法如下，第一個 &lt;code&gt;{}&lt;/code&gt; 是 JSX 語法，第二個為 JavaScript 物件。與一般屬性值用 &lt;code&gt;-&lt;/code&gt; 分隔不同，為駝峰式命名寫法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;HelloMessage style=&amp;#123;&amp;#123; color: &lt;span class=&quot;string&quot;&gt;&#39;#FFFFFF&#39;&lt;/span&gt;, fontSize: &lt;span class=&quot;string&quot;&gt;&#39;30px&#39;&lt;/span&gt;&amp;#125;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;10-事件處理&quot;&gt;&lt;a href=&quot;#10-事件處理&quot; class=&quot;headerlink&quot; title=&quot;10. 事件處理&quot;&gt;&lt;/a&gt;10. 事件處理&lt;/h3&gt;&lt;p&gt;事件處理為前端開發的重頭戲，在 JSX 中透過 inline 事件的綁定來監聽並處理事件（注意也是駝峰式寫法）：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;HelloMessage onClick=&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onBtn&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;總結&quot;&gt;&lt;a href=&quot;#總結&quot; class=&quot;headerlink&quot; title=&quot;總結&quot;&gt;&lt;/a&gt;總結&lt;/h2&gt;&lt;p&gt;以上就是 JSX 簡明入門教學，希望透過以上介紹，讓讀者了解在 React 中為何要使用 JSX，以及 JSX 基本概念和用法。最後為大家複習一下：在 React 世界裡，所有事物都是以 Component 為基礎，通常會將同一個 Compoent 相關的程式和資源都放在一起，而在撰寫 React Component 時我們常會使用 &lt;a href=&quot;https://facebook.github.io/jsx/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSX&lt;/a&gt; 的方式來提升程式撰寫效率。JSX 是一種語法類似 XML 的 ECMAScript 語法擴充，可以善用 JavaScript 的強大能力，放棄蹩腳的模版語言。當然 JSX 並非強制使用，你也可以選擇不用，因為最終 JSX 的內容會轉化成 JavaScript。當相信閱讀完上述的內容後，你會開始認真考慮使用 JSX 的語法。&lt;/p&gt;
&lt;h2 id=&quot;延伸閱讀&quot;&gt;&lt;a href=&quot;#延伸閱讀&quot; class=&quot;headerlink&quot; title=&quot;延伸閱讀&quot;&gt;&lt;/a&gt;延伸閱讀&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.puritys.me/docs-blog/article-320-Imperative-programming-or-declarative-programming.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Imperative programming or declarative programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSX in Depth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/kdchang/react101/details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;從零開始學 React（ReactJS 101）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;image via &lt;a href=&quot;http://www.adweek.com/socialtimes/files/2014/05/LikeButtoniOSApps650.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;adweek&lt;/a&gt;, &lt;a href=&quot;http://codecondo.com/wp-content/uploads/2015/12/Useful-Features-of-React_7851.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codecondo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;http://blog.kdchang.cc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kdchang&lt;/a&gt; 文藝型開發者，夢想是做出人們想用的產品和辦一所心目中理想的學校，目前專注在 Mobile 和 IoT 應用開發。A Starter &amp;amp; Maker. JavaScript, Python &amp;amp; iOS/Android lover. Keep Shipping Cool Mobile/IoT App &amp;amp; Web App.:)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/kdchang/reactjs.png&quot; alt=&quot;一看就懂的 JSX 簡明入門教學指南&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;根
    
    </summary>
    
    
      <category term="React, React Native, ES5, ES6, ES7, JavaScript, JavaScript2015, Webpack, JSX" scheme="http://blog.techbridge.cc/tags/React-React-Native-ES5-ES6-ES7-JavaScript-JavaScript2015-Webpack-JSX/"/>
    
  </entry>
  
  <entry>
    <title>用 DDS 開發 ROS 2.0</title>
    <link href="http://blog.techbridge.cc/2016/04/15/ros-2-dds/"/>
    <id>http://blog.techbridge.cc/2016/04/15/ros-2-dds/</id>
    <published>2016-04-15T14:18:57.000Z</published>
    <updated>2016-05-14T03:01:44.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這篇文章想要向大家介紹ROS 2.0的底層實作概念，雖然比較不會有程式實作的討論，但我覺得這一塊的深度滿值得介紹的，因為使用ROS有好幾種層次:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用ROS的各種工具來建立自己的應用&lt;/li&gt;
&lt;li&gt;在開發上碰到一些問題，修改現成的package來滿足自己的需求&lt;/li&gt;
&lt;li&gt;開發自己的演算法，發布自己的package給其他人使用&lt;/li&gt;
&lt;li&gt;協助開發與維護ROS的核心&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這篇文章要討論的議題已經落在第四個層次，所以對於一般的使用者來說，可能不太具有直接應用的價值，但如果對於ROS的底層實作有更深入的理解(知道他是怎麼開發出來的、有哪些限制、有哪些優點)，就可以在利用ROS撰寫自己的應用時，更能開發出效能最佳化的應用。&lt;/p&gt;
&lt;h2 id=&quot;為什麼要開發ROS-2-0&quot;&gt;&lt;a href=&quot;#為什麼要開發ROS-2-0&quot; class=&quot;headerlink&quot; title=&quot;為什麼要開發ROS 2.0?&quot;&gt;&lt;/a&gt;為什麼要開發ROS 2.0?&lt;/h2&gt;&lt;p&gt;事實上，如果ROS 1.0 已經足夠完美，那我們就沒有必要討論ROS 2.0。不過事情當然不是這樣，因為ROS 1.0在開發的時候，是圍繞著一隻機器人來開發的，雖然當初的設計已經讓ROS變得很有彈性，可以被應用在各式各樣的機器人上，但是隨著使用者越來越多，超乎開發者想像的使用情境也越來越多。&lt;/p&gt;
&lt;p&gt;也就是說，如果開發者們不積極地開始開發下一代的ROS，遲早會無法滿足越來越複雜而多樣化的需求。對於這些使用情境的具體描述，可以參考&lt;a href=&quot;http://po-jen.github.io/design/articles/why_ros2.html#section-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;這裡&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;開發ROS系統需要實現的模塊&quot;&gt;&lt;a href=&quot;#開發ROS系統需要實現的模塊&quot; class=&quot;headerlink&quot; title=&quot;開發ROS系統需要實現的模塊&quot;&gt;&lt;/a&gt;開發ROS系統需要實現的模塊&lt;/h2&gt;&lt;p&gt;首先來談論一下建立整個系統上，需要考慮的幾個重點:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discovery功能&lt;/li&gt;
&lt;li&gt;Publisher-Subscriber功能&lt;/li&gt;
&lt;li&gt;Service 與 Action功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Discovery功能的意義是，只要有新的node啟動，就能在整個ROS node的網路中被看見(概念很像是我打開手機的wifi熱點分享，其他裝置就應該要可以發現有這個wifi熱點)。&lt;/p&gt;
&lt;p&gt;接下來的Publisher-Subscriber功能、Service功能跟Action功能其實就是ROS使用者熟悉的Topic、Service跟Actionlib啦，本質上這幾種功能在處理的都是node之間的溝通(也就是程式之間的溝通，大家可以想像要讓一隻機器人正常運作，電腦上需要運行的程式一定是很多個，而且需要彼此溝通，所以底層的溝通機制需要有人來實作，不然就是…想開發機器人程式的你得自己實作)。如果你不太確定自己知不知道我在說什麼，可以看看這一篇&lt;a href=&quot;https://pojenlai.wordpress.com/2012/11/03/ros-topic-service-and-actionlib/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;區分Topic、Service跟Actionlib的文章&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;DDS的系統層概念&quot;&gt;&lt;a href=&quot;#DDS的系統層概念&quot; class=&quot;headerlink&quot; title=&quot;DDS的系統層概念&quot;&gt;&lt;/a&gt;DDS的系統層概念&lt;/h2&gt;&lt;p&gt;想要實作上面這些功能，DDS並不是唯一的選擇，但是，OSRF(Open Source Robotic Foundation)的開發者經過嘗試之後，覺得這是最好的開發選項。細節理由可以看延伸閱讀的第3篇文章，這部分已經有中文翻譯了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/api_levels.png&quot; alt=&quot;api_levels&quot;&gt;&lt;/p&gt;
&lt;p&gt;從上面這張圖可以清楚地看出，使用者所需要接觸到的只有最上面的兩層。使用者自己寫的code就屬於Userland Code，而使用者自己寫的code中呼叫到的ROS API (例如ros::init())就屬於ROS client library API，而DDS的API則是在更底層被ROS client library API所使用。&lt;/p&gt;
&lt;p&gt;有趣的地方是，為了保持彈性，OSRF的開發者們希望使用者可以自己選擇底層使用的是哪一個版本的DDS (DDS像是一種標準，所以可以有不同公司提供自己的實作版本)。&lt;/p&gt;
&lt;h2 id=&quot;一點細節的延伸&quot;&gt;&lt;a href=&quot;#一點細節的延伸&quot; class=&quot;headerlink&quot; title=&quot;一點細節的延伸&quot;&gt;&lt;/a&gt;一點細節的延伸&lt;/h2&gt;&lt;p&gt;上面討論的都是概念的理解，對於技術有興趣的你想必沒辦法接受，所以就讓我們來看一點技術細節吧!&lt;/p&gt;
&lt;p&gt;我們還是一樣先站在開發者的角度，最基本我們需要提供的工具就是Node初始化的函式對吧，這個函式的長相就像:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Node::Node(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; name): running_(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*----------------------親切的中文註解來囉!!!----------------------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nodes_.push_back(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subscription_iterator_ = subscriptions_.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	name_ = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//取得了DDS的DomainParticipantFactory的instance，很像是一個node產生器的感覺&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dpf_ = DDS::DomainParticipantFactory::get_instance();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	checkHandle(dpf_.in(), &lt;span class=&quot;string&quot;&gt;&quot;DDS::DomainParticipantFactory::get_instance&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DDS::DomainId_t domain = DDS::DOMAIN_ID_DEFAULT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//實際產生一個participant，應該就是一個node&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	participant_ = create_participant( domain, PARTICIPANT_QOS_DEFAULT, NULL,DDS::STATUS_MASK_NONE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	checkHandle(participant_.in(), &lt;span class=&quot;string&quot;&gt;&quot;DDS::DomainParticipantFactory::create_participant&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*----------------------看到這裡就好囉!!!----------------------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Create the default QoS for Topics&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DDS::ReturnCode_t status = participant_get_default_topic_qos(default_topic_qos_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	checkStatus(status, &lt;span class=&quot;string&quot;&gt;&quot;DDS::DomainParticipant::get_default_topic_qos&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	default_topic_qos_.reliability.kind = DDS::BEST_EFFORT_RELIABILITY_QOS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Create the default QoS for Publishers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	status = participant_get_default_publisher_qos(default_publisher_qos_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	checkStatus(status, &lt;span class=&quot;string&quot;&gt;&quot;DDS::DomainParticipant::get_default_publisher_qos&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	default_publisher_qos_.partition.name.length(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	default_publisher_qos_.partition.name[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;ros_partition&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Create the default QoS for Subscribers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	status = participant_get_default_subscriber_qos(default_subscriber_qos_);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	checkStatus(status, &lt;span class=&quot;string&quot;&gt;&quot;DDS::DomainParticipant::get_default_publisher_qos&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	default_subscriber_qos_.partition.name.length(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	default_subscriber_qos_.partition.name[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;ros_partition&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Create a waitset for spin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	waitset_ = new DDS::WaitSet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Create a parameter server for this node&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	create_parameter_server(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;大家先不要嚇到，一下有太多細節本來就不可能看懂，大家只需要看我用註解標記起來的區域，體驗一下什麼叫做ROS client library API呼叫DDS API的感覺就好。&lt;/p&gt;
&lt;p&gt;那對於一個使用者來說，假設我今天要啟動一隻機器人，那就需要呼叫建立node的函式，看起來就像:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TurtleApp(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;** argv): QApplication(argc, argv)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rclcpp::init(argc, argv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nh_ = rclcpp::create_node(&lt;span class=&quot;string&quot;&gt;&quot;turtlesim&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你一定覺得奇怪，rclcpp::create_node()跟上面我講的Node::Node()建構子根本接不起來啊? 所以這邊就要補上一點點程式碼，想必你就懂了:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; rclcpp::init(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;** argv)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globally_initialized)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		throw AlreadyInitializedError();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* Register a signal handler so DDS doesn not just sit there... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (signal(SIGINT, Node::static_signal_handler) == SIG_ERR)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;fputs&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;An error occurred while setting a signal handler.\n&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	globally_initialized = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Node::Ptr rclcpp::create_node(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; &amp;amp;name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return Node::Ptr(new Node(name));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;總結&quot;&gt;&lt;a href=&quot;#總結&quot; class=&quot;headerlink&quot; title=&quot;總結&quot;&gt;&lt;/a&gt;總結&lt;/h2&gt;&lt;p&gt;OK!簡介就到這邊啦，如果對於實作細節有興趣深入的讀者，不妨去看看ROS 2.0的github repo，詳細的程式碼全部都是開源的，所以可以從中學習開發的細節。&lt;/p&gt;
&lt;h2 id=&quot;延伸閱讀&quot;&gt;&lt;a href=&quot;#延伸閱讀&quot; class=&quot;headerlink&quot; title=&quot;延伸閱讀&quot;&gt;&lt;/a&gt;延伸閱讀&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://po-jen.github.io/design/articles/why_ros2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;為什麼要開發ROS 2.0?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://po-jen.github.io/design/articles/ros_with_zeromq.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用ZeroMQ跟相關的函式庫來開發ROS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://po-jen.github.io/design/articles/ros_on_dds.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用DDS來開發ROS&lt;/a&gt; (仍在趕工中，歡迎開issue催促翻譯者QQ)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ros2/ros2/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS 2.0 wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/osrf/ros_dds/tree/master/prototype&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ROS DDS Prototype (Github Repo)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;https://pojenlai.wordpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@pojenlai&lt;/a&gt; 演算法工程師，對機器人跟電腦視覺有少許研究，最近在鍛鍊自己的執行力&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這篇文章想要向大家介紹ROS 2.0的底層實作概念，雖然比較不會有程式實作的討論，但我覺得這一塊的深度滿值得介紹的，因為使用ROS有好幾種層
    
    </summary>
    
    
      <category term="機器人, Robot, ROS, DDS" scheme="http://blog.techbridge.cc/tags/%E6%A9%9F%E5%99%A8%E4%BA%BA-Robot-ROS-DDS/"/>
    
  </entry>
  
  <entry>
    <title>一看就懂的 React ES5、ES6+ 常見用法對照表</title>
    <link href="http://blog.techbridge.cc/2016/04/04/react-react-native-es5-es6-cheat-sheet/"/>
    <id>http://blog.techbridge.cc/2016/04/04/react-react-native-es5-es6-cheat-sheet/</id>
    <published>2016-04-04T15:26:00.000Z</published>
    <updated>2016-06-08T12:25:42.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/img/kdchang/react-es6.jpg&quot; alt=&quot;一看就懂的 React ES5、ES6+ 常見用法對照表&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt; 是 Facebook 推出的開源 &lt;a href=&quot;https://en.wikipedia.org/wiki/JavaScript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript&lt;/a&gt; Library。自從 React 正式開源後，React 生態系開始蓬勃發展。事實上，透過學習 React 生態系（ecosystem）的過程中，可以讓我們順便學習現代化 Web 開發的重要觀念（例如：ES6、&lt;a href=&quot;https://github.com/webpack/webpack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack&lt;/a&gt;、&lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel&lt;/a&gt;、模組化等），成為更好的開發者。雖然 ES6（ECMAScript2015）、ES7 是未來趨勢（本文將 ES6、ES7 稱為 ES6+），然而目前在網路上有許多的學習資源仍是以 ES5 為主，導致讀者在學習上遇到一些坑洞和迷惑（本文假設讀者對於 React 已經有些基本認識，若你對於 React 尚不熟悉，建議先行&lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;閱讀官方文件&lt;/a&gt;和&lt;a href=&quot;https://scotch.io/tutorials/learning-react-getting-started-and-concepts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;本篇入門教學&lt;/a&gt;）。因此本文希望透過整理在 React 中 ES5、ES6+ 常見用法對照表，讓讀者們可以在實現功能時（尤其在 &lt;a href=&quot;https://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native&lt;/a&gt;）可以更清楚兩者的差異，無痛轉移到 ES6+。 &lt;/p&gt;
&lt;h2 id=&quot;大綱&quot;&gt;&lt;a href=&quot;#大綱&quot; class=&quot;headerlink&quot; title=&quot;大綱&quot;&gt;&lt;/a&gt;大綱&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Modules&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Method definition&lt;/li&gt;
&lt;li&gt;Property initializers&lt;/li&gt;
&lt;li&gt;State&lt;/li&gt;
&lt;li&gt;Arrow functions&lt;/li&gt;
&lt;li&gt;Dynamic property names &amp;amp; template strings&lt;/li&gt;
&lt;li&gt;Destructuring &amp;amp; spread attributes&lt;/li&gt;
&lt;li&gt;Mixins&lt;/li&gt;
&lt;li&gt;Default Parameters&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1-Modules&quot;&gt;&lt;a href=&quot;#1-Modules&quot; class=&quot;headerlink&quot; title=&quot;1. Modules&quot;&gt;&lt;/a&gt;1. Modules&lt;/h2&gt;&lt;p&gt;隨著 Web 技術的進展，模組化開發已經成為一個重要課題。關於 JavaScript 模組化我們這邊不詳述，建議讀者參考 &lt;a href=&quot;http://huangxuan.me/js-module-7day/#/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;這份投影片&lt;/a&gt; 和 &lt;a href=&quot;http://justineo.github.io/singles/writing-modular-js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;這篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;ES5 若使用 CommonJS 標準，一般使用 &lt;code&gt;require()&lt;/code&gt; 用法引入模組：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; React = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MyComponent = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./MyComponent&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;輸出則是使用 &lt;code&gt;module.exports&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = MyComponent;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ES6+ &lt;code&gt;import&lt;/code&gt; 用法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; MyComponent &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./MyComponent&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;輸出則是使用 &lt;code&gt;export default&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Compoent&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-Classes&quot;&gt;&lt;a href=&quot;#2-Classes&quot; class=&quot;headerlink&quot; title=&quot;2. Classes&quot;&gt;&lt;/a&gt;2. Classes&lt;/h2&gt;&lt;p&gt;在 React 中元件（Component）是組成視覺頁面的基礎。在 ES5 中我們使用 &lt;code&gt;React.createClass()&lt;/code&gt; 來建立 Component，而在 ES6+ 則是用 &lt;a href=&quot;https://babeljs.io/docs/learn-es2015/#classes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Classes&lt;/a&gt; 繼承 &lt;code&gt;React.Component&lt;/code&gt; 來建立 Component。若是有寫過 Java 等物件導向語言（OOP）的讀者應該對於這種寫法比較不陌生，不過要注意的是 JavaScript 仍是原型繼承類型的物件導向程式語言，只是使用 &lt;code&gt;Classes&lt;/code&gt; 讓物件導向使用上更加直觀。對於選擇 &lt;code&gt;class&lt;/code&gt; 使用上還有疑惑的讀者建議可以閱讀 &lt;a href=&quot;https://toddmotto.com/react-create-class-versus-component/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React.createClass versus extends React.Component&lt;/a&gt; 這篇文章。&lt;/p&gt;
&lt;p&gt;ES5 &lt;code&gt;React.createClass()&lt;/code&gt; 用法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Photo = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.props.description&amp;#125;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.props.src&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReactDOM.render(&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Photo&lt;/span&gt; /&amp;gt;&lt;/span&gt;, document.getElementById(&#39;main&#39;));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ES6+ &lt;code&gt;class&lt;/code&gt; 用法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Photo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.props.description&amp;#125;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.props.src&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReactDOM.render(&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Photo&lt;/span&gt; /&amp;gt;&lt;/span&gt;, document.getElementById(&#39;main&#39;));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 ES5 我們會在 &lt;code&gt;componentWillMount&lt;/code&gt; 生命週期定義希望在 &lt;code&gt;render&lt;/code&gt; 前執行，且只會執行一次的任務：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Photo = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  componentWillMount: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 ES6+ 則是定義在 &lt;code&gt;constructor&lt;/code&gt; 建構子中：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Photo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 原本在 componentWillMount 操作的動作可以放在這&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-Method-definition&quot;&gt;&lt;a href=&quot;#3-Method-definition&quot; class=&quot;headerlink&quot; title=&quot;3. Method definition&quot;&gt;&lt;/a&gt;3. Method definition&lt;/h2&gt;&lt;p&gt;在 ES6 中我們使用 &lt;code&gt;Method&lt;/code&gt; 可以忽略 &lt;code&gt;function&lt;/code&gt; 和 &lt;code&gt;,&lt;/code&gt;，使用上更為簡潔！ES5 &lt;code&gt;React.createClass()&lt;/code&gt; 用法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Photo = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  handleClick: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ES6+ class 用法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Photo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  handleClick(e) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-Property-initializers&quot;&gt;&lt;a href=&quot;#4-Property-initializers&quot; class=&quot;headerlink&quot; title=&quot;4. Property initializers&quot;&gt;&lt;/a&gt;4. Property initializers&lt;/h2&gt;&lt;p&gt;Component 屬性值是資料傳遞重要的元素，在 ES5 中我們使用 &lt;code&gt;propTypes&lt;/code&gt; 和  &lt;code&gt;getDefaultProps&lt;/code&gt; 來定義屬性（props）的預設值和型別：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Todo = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getDefaultProps: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      checked: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      maxLength: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  propTypes: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    checked: React.PropTypes.bool.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxLength: React.PropTypes.number.isRequired&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: fucntion() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 ES6+ 中我們則是參考 &lt;a href=&quot;https://github.com/jeffmo/es-class-fields-and-static-properties&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES7 property initializers&lt;/a&gt; 使用 &lt;code&gt;class&lt;/code&gt; 中的靜態屬性（static properties）來定義：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; defaultProps = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    checked: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxLength: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;; &lt;span class=&quot;comment&quot;&gt;// 注意有分號&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; propTypes = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    checked: React.PropTypes.bool.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxLength: React.PropTypes.number.isRequired&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ES6+ 另外一種寫法，可以留意一下，主要是看各團隊喜好和規範，選擇合適的方式：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;View&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Todo.defaultProps = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    checked: false,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxLength: 10,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Todo.propTypes = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    checked: React.PropTypes.bool.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    maxLength: React.PropTypes.number.isRequired,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-State&quot;&gt;&lt;a href=&quot;#5-State&quot; class=&quot;headerlink&quot; title=&quot;5. State&quot;&gt;&lt;/a&gt;5. State&lt;/h2&gt;&lt;p&gt;在 React 中 &lt;code&gt;Props&lt;/code&gt; 和 &lt;code&gt;State&lt;/code&gt; 是資料流傳遞的重要元素，不同的是 &lt;code&gt;state&lt;/code&gt; 可更動，可以去執行一些運算。在 ES5 中我們使用 &lt;code&gt;getInitialState&lt;/code&gt; 去初始化 &lt;code&gt;state&lt;/code&gt;： &lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Todo = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getInitialState: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxLength: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.maxLength,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 ES6+ 中我們初始化 &lt;code&gt;state&lt;/code&gt; 有兩種寫法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxLength: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.maxLength,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外一種寫法，使用在建構式初始化。比較推薦使用這種方式，方便做一些運算：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            maxLength: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.maxLength,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;6-Arrow-functions&quot;&gt;&lt;a href=&quot;#6-Arrow-functions&quot; class=&quot;headerlink&quot; title=&quot;6. Arrow functions&quot;&gt;&lt;/a&gt;6. Arrow functions&lt;/h2&gt;&lt;p&gt;在講 &lt;code&gt;Arrow functions&lt;/code&gt; 之前，我們先聊聊在 React 中 &lt;code&gt;this&lt;/code&gt; 和它所代表的 &lt;code&gt;context&lt;/code&gt;。在 ES5 中，我們使用 &lt;code&gt;React.createClass()&lt;/code&gt; 來建立 Component，而在 &lt;code&gt;React.createClass()&lt;/code&gt; 下，預設幫你綁定好 &lt;code&gt;method&lt;/code&gt; 的 &lt;code&gt;this&lt;/code&gt;，你毋須自行綁定。所以你可以看到像是下面的例子，&lt;code&gt;callback function&lt;/code&gt; handleButtonClick 中的  &lt;code&gt;this&lt;/code&gt; 是指到 component 的實例（instance），而非觸發事件的物件：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; TodoBtn = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handleButtonClick: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 此 this 指到 component 的實例（instance），而非 button&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;showOptionsModal: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handleButtonClick&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;this.props.label&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而自動綁定這種方式反而會讓人容易誤解，所以在 ES6+ 推薦使用 &lt;code&gt;bind&lt;/code&gt; 綁定 &lt;code&gt;this&lt;/code&gt; 或使用 &lt;code&gt;Arrow functions&lt;/code&gt;（它會绑定當前 &lt;code&gt;scope&lt;/code&gt; 的 &lt;code&gt;this context&lt;/code&gt;）兩種方式，你可以參考下面例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TodoBtn&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handleButtonClick(e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 確認綁定 this 指到 component instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;toggle: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 這邊可以用 this.handleButtonClick.bind(this) 手動綁定或是 Arrow functions () =&amp;gt; &amp;#123;&amp;#125; 用法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handleButtonClick.bind(this)&amp;#125;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;(e)&lt;/span&gt;=&amp;gt;&lt;/span&gt; &amp;#123;this.handleButtonClick(e)&amp;#125; &amp;#125;&amp;gt;&amp;#123;this.props.label&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Arrow functions&lt;/code&gt; 雖然一開始看起來有點怪異，但其實觀念很簡單：一個簡化的函數。函數基本上就是參數（不一定要有參數）、表達式、回傳值（也可能是回傳 undefined）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Arrow functions 的一些例子&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;()=&amp;gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e=&amp;gt;e+2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;()=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(&amp;apos;XD&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(a,b)=&amp;gt;a+b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (e == 2)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return 100/e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不過要注意的是無論是 &lt;code&gt;bind&lt;/code&gt; 或是 &lt;code&gt;Arrow functions&lt;/code&gt;，每次執行回傳都是指到一個新的函數，若需要再調用到這個函數，請記得先把它存起來：&lt;/p&gt;
&lt;p&gt;錯誤用法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TodoBtn&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    componentWillMount()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Btn.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleButtonClick.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    componentDidmount()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Btn.removeEventListener(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleButtonClick.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onAppPaused(event)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正確用法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TodoBtn&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleButtonClick = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleButtonClick.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    componentWillMount()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Btn.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleButtonClick);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    componentDidmount()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Btn.removeEventListener(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleButtonClick);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多 Arrows and Lexical This 特性可以&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/#arrows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;參考這個文件&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;7-Dynamic-property-names-amp-template-strings&quot;&gt;&lt;a href=&quot;#7-Dynamic-property-names-amp-template-strings&quot; class=&quot;headerlink&quot; title=&quot;7. Dynamic property names &amp;amp; template strings&quot;&gt;&lt;/a&gt;7. Dynamic property names &amp;amp; template strings&lt;/h2&gt;&lt;p&gt;以前在 ES5 我們要動態設定屬性名稱時，往往需要多寫幾行程式碼才能達到目標：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Todo = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  onChange: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;inputName, e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stateToSet = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    stateToSet[inputName + &lt;span class=&quot;string&quot;&gt;&#39;Value&#39;&lt;/span&gt;] = e.target.value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(stateToSet);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但在 ES6+中，透過 &lt;a href=&quot;https://babeljs.io/blog/2015/06/07/react-on-es6-plus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;enhancements to object literals&lt;/a&gt; 和 &lt;a href=&quot;https://babeljs.io/docs/learn-es2015/#template-strings&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;template strings&lt;/a&gt; 可以輕鬆完成動態設定屬性名稱的任務：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Todo extends React.Component &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  onChange(inputName, e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [`$&amp;#123;inputName&amp;#125;Value`]: e.target.value,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Template Strings 是一種語法糖（syntactic sugar），方便我們組織字串（這邊也用上 &lt;code&gt;let&lt;/code&gt;、&lt;code&gt;const&lt;/code&gt; 變數和常數宣告的方式，和 &lt;code&gt;var&lt;/code&gt; 的 &lt;code&gt;function scope&lt;/code&gt; 不同的是它們是屬於 &lt;code&gt;block scope&lt;/code&gt;，亦即生存域存在於 &lt;code&gt;{}&lt;/code&gt; 間）：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Interpolate variable bindings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;today&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`Hello &lt;span class=&quot;subst&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;, how are you &lt;span class=&quot;subst&quot;&gt;$&amp;#123;time&amp;#125;&lt;/span&gt;?`&lt;/span&gt; \\ Hello Bob, how are you today?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;8-Destructuring-amp-spread-attributes&quot;&gt;&lt;a href=&quot;#8-Destructuring-amp-spread-attributes&quot; class=&quot;headerlink&quot; title=&quot;8. Destructuring &amp;amp; spread attributes&quot;&gt;&lt;/a&gt;8. Destructuring &amp;amp; spread attributes&lt;/h2&gt;&lt;p&gt;在 React 的 Component 中，父元件利用 &lt;code&gt;props&lt;/code&gt; 來傳遞資料到子元件是常見作法，然而我們有時會希望只傳遞部分資料，此時 ES6+ 中的 &lt;a href=&quot;https://babeljs.io/docs/learn-es2015/#destructuring&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Destructuring&lt;/a&gt; 和 &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-spread.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSX 的 Spread Attributes
&lt;/a&gt; ，&lt;code&gt;...&lt;/code&gt; Spread Attributes 主要是用來迭代物件：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      className,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...others,  &lt;span class=&quot;comment&quot;&gt;// ...others 包含 this.props 除了 className 外所有值。this.props = &amp;#123;value: &#39;true&#39;, title: &#39;header&#39;, className: &#39;content&#39;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;className&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TodoList&lt;/span&gt; &amp;#123;&lt;span class=&quot;attr&quot;&gt;...others&lt;/span&gt;&amp;#125; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.handleLoadMoreClick&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;Load more&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但使用上要注意的是若是有重複的屬性值則以後來覆蓋，下面的例子中若 &lt;code&gt;...this.props&lt;/code&gt;，有 &lt;code&gt;className&lt;/code&gt;，則被後來的 &lt;code&gt;main&lt;/code&gt; 所覆蓋：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div &amp;#123;...this.props&amp;#125; className=&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而 &lt;code&gt;Destructuring&lt;/code&gt; 也可以用在簡化 &lt;code&gt;Module&lt;/code&gt; 的引入上，這邊我們先用 ES5 中引入方式來看：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; React = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;react-native&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Component = React.component;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;View&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;View&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; HelloWorld;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下 ES5 寫法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var React = require(&amp;apos;react-native&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var View = React.View;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 ES6+ 則可以直接使用 &lt;code&gt;Destructuring&lt;/code&gt; 這種簡化方式來引入模組中的元件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 這邊等於上面的寫法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var &amp;#123; View &amp;#125; = require(&amp;apos;react-native&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更進一步可以使用 &lt;code&gt;import&lt;/code&gt; 語法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	View,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Component,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Text,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-native&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;View&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;View&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; HelloWorld;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;9-Mixins&quot;&gt;&lt;a href=&quot;#9-Mixins&quot; class=&quot;headerlink&quot; title=&quot;9. Mixins&quot;&gt;&lt;/a&gt;9. Mixins&lt;/h2&gt;&lt;p&gt;在 ES5 中，我們可以使用 &lt;code&gt;Mixins&lt;/code&gt; 的方式去讓不同的 Component 共用相似的功能，重用我們的程式碼：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; PureRenderMixin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;react-addons-pure-render-mixin&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mixins: [PureRenderMixin],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.props.className&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;foo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但由於官方不打算在 ES6+ 中繼續推行 &lt;code&gt;Mixins&lt;/code&gt;，若還是希望使用，可以參考看看&lt;a href=&quot;https://www.npmjs.com/package/es6-class-mixin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第三方套件&lt;/a&gt;或是&lt;a href=&quot;https://gist.github.com/sebmarkbage/ef0bf1f338a7182b6775&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;這個文件的用法&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;10-Default-Parameters&quot;&gt;&lt;a href=&quot;#10-Default-Parameters&quot; class=&quot;headerlink&quot; title=&quot;10. Default Parameters&quot;&gt;&lt;/a&gt;10. Default Parameters&lt;/h2&gt;&lt;p&gt;以前 ES5 我們函數要使用預設值需要這樣使用：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; link = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;height, color&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; height = height || &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; color = color || &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;現在 ES6+ 的函數可以支援預設值，讓程式碼更為簡潔：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; link = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;height = 50, color = &#39;red&#39;&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;總結&quot;&gt;&lt;a href=&quot;#總結&quot; class=&quot;headerlink&quot; title=&quot;總結&quot;&gt;&lt;/a&gt;總結&lt;/h2&gt;&lt;p&gt;以上就是 React ES5、ES6+常見用法對照表，能看到這邊的你應該已經對於 React ES5、ES6 使用上有些認識，先給自己一些掌聲吧！確實從 ES6 開始，JavaScript 和以前我們看到的 JavaScript 有些不同，增加了許多新的特性，有些讀者甚至會很懷疑說這真的是 JavaScript 嗎？ES6 的用法對於初學者來說可能會需要寫一點時間吸收，下面我幫大家準備了延伸閱讀，方便大家進一步參考學習。接下來我們也會有一系列從零開始學 React 的文章來帶大家由淺入深學習 ReactJS 生態系，運用 JavaScript 打造跨平台應用程式。筆者才書學淺，若有疏漏歡迎大家一起交流討論：）&lt;/p&gt;
&lt;h2 id=&quot;延伸閱讀&quot;&gt;&lt;a href=&quot;#延伸閱讀&quot; class=&quot;headerlink&quot; title=&quot;延伸閱讀&quot;&gt;&lt;/a&gt;延伸閱讀&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React/React Native 的ES5 ES6写法对照表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://babeljs.io/blog/2015/06/07/react-on-es6-plus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React on ES6+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ghugo.com/react-native-es6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react native 中es6语法解析&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn ES2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript 6入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React官方網站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fraserxu.me/intro-to-react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React INTRO TO REACT.JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://toddmotto.com/react-create-class-versus-component/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React.createClass versus extends React.Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lzbSun/react-native-coding-style&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react-native-coding-style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/airbnb/javascript/tree/master/react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Airbnb React/JSX Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/kdchang/react101/details&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;從零開始學 React（ReactJS 101）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;http://blog.kdchang.cc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kdchang&lt;/a&gt; 文藝型開發者，夢想是做出人們想用的產品和辦一所心目中理想的學校，目前專注在 Mobile 和 IoT 應用開發。A Starter &amp;amp; Maker. JavaScript, Python &amp;amp; iOS/Android lover. Keep Shipping Cool Mobile/IoT App &amp;amp; Web App.:)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/kdchang/react-es6.jpg&quot; alt=&quot;一看就懂的 React ES5、ES6+ 常見用法對照表&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a
    
    </summary>
    
    
      <category term="React, React Native, ES5, ES6, ES7, JavaScript, JavaScript2015, Webpack" scheme="http://blog.techbridge.cc/tags/React-React-Native-ES5-ES6-ES7-JavaScript-JavaScript2015-Webpack/"/>
    
  </entry>
  
  <entry>
    <title>Browser Rendering Optimization</title>
    <link href="http://blog.techbridge.cc/2016/04/02/Browser-Rendering-Optimization/"/>
    <id>http://blog.techbridge.cc/2016/04/02/Browser-Rendering-Optimization/</id>
    <published>2016-04-01T16:13:00.000Z</published>
    <updated>2016-04-15T13:43:26.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;“My name is Barry Allen, and I’m the fastest man alive …”&lt;br&gt;“Wait..reverse flash is faster then you, zoom is faster than you..”&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天來談談Browser Rendering Optimisation。&lt;/p&gt;
&lt;p&gt;相信大家小時候都好奇過早期的電影、卡通或動畫，是怎麼樣製作出來的，而我們也都知道基本上就是一連串的&lt;code&gt;畫面&lt;/code&gt;以非常快速的方式做切換，矇騙你的視覺讓你感受到是連續的&lt;code&gt;影片&lt;/code&gt;，而Browser其實也是類似的做法，當取得Server的回應後，瀏覽器便把接收到的HTML畫出來，而每當你的網頁有所變化時，Browser就會再依據其邏輯將網頁重新渲染一遍，也因此才能看到這麼多漂亮的效果。&lt;/p&gt;
&lt;p&gt;而所謂browser rendering optimization就是要讓渲染的過程能夠更快速、更順暢，讓你的網頁畫面如夢似幻、細緻耀眼。&lt;/p&gt;
&lt;p&gt;要做到這件事情，就必須提及FPS(Frames per Second)，顧名思義就是每秒畫幾個Frames，一般影片大概是&lt;a href=&quot;https://en.wikipedia.org/wiki/Frame_rate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;30fps&lt;/a&gt;，而多數螢幕畫面的更新頻率是60Hz，因此若我們能將fps極致提升到60fps，理當能有非常棒的畫面呈現！&lt;/p&gt;
&lt;p&gt;知道目標後，let’s do some math…&lt;br&gt;&lt;code&gt;60fps = 60 frames per second = 60 frames every 1000ms&lt;/code&gt;&lt;br&gt;好的從我們優異的數學能力下得知，要達到60fps，我們繪製一個frames的時間必須在16.6666…ms左右(1000/60)&lt;/p&gt;
&lt;p&gt;ok，那要怎麼知道自己的網頁每個frames花了多少時間繪製？拜Google大神所賜，只要打開Chrome的devTool，切換到Timeline的tab，就可以很容易的知道網頁在browser上的render時間。讓我們用畫面超級old school的pchome拍賣來Demo一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/googleDevTool-pchome.png&quot; alt=&quot;Devtool-timeline(點圖放大)&quot; title=&quot;DevTool-timeline&quot;&gt;&lt;/p&gt;
&lt;p&gt;先別被圖中五顏六色的區塊嚇到，在我們說明這Tool該如何使用之前，必須先瞭解Browser的Render過程，以及這圖片中每個顏色所代表的意義。&lt;/p&gt;
&lt;p&gt;接觸過HTML的人一定都知道所謂的DOM Tree，Browser會解析HTML並轉換成DOM Tree做操作，但知道&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Render Tree&lt;/a&gt;的人可能就不多了，Render tree由DOM tree與CSS結合產生，Browser就是依照Render Tree來決定該在畫面上呈現什麼東西。若你今天在某個div的css上加上&lt;code&gt;display: none&lt;/code&gt;，那這個div就不會再Render tree上呈現。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/RenderTree.png&quot; alt=&quot;Render Tree (source from google)&quot;&gt;&lt;/p&gt;
&lt;p&gt;既然Render的過程也是一棵Tree，有點概念的人可能會想：每次style改變或是我更動DOM的位置時，這棵Tree也就會變動了吧？&lt;br&gt;沒錯！在整個Browser的Render過程中，就是會不斷去recalculating style、layout的關係，來建構這棵樹。&lt;/p&gt;
&lt;p&gt;當然Browser的渲染過程不止這些，還必須載入js, css, web api等等的資源，因此有所謂的Rendering Pipeline&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/render_pipeline.png&quot; alt=&quot;Render Pipeline (source from google)&quot;&gt;&lt;br&gt;從圖上可以發現其順序為：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Javascript: 載入與執行JS/CSS&lt;/li&gt;
&lt;li&gt;Style: 根據js與css計算style&lt;/li&gt;
&lt;li&gt;Layout: 當style套入元素時，瀏覽器要檢查是否會影響到整個畫面的排列，並進行排列&lt;/li&gt;
&lt;li&gt;Paint: 排列後有更動到的元素需要重新繪製（第一次載入的話當然是全部繪製）&lt;/li&gt;
&lt;li&gt;Composite: 最後就是將所有元素重新合成回來（重新繪製的元素與原本的元素）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;實際上並非每次的前端更動都會執行這五個步驟，若你只有切換顏色、圖片等不影響版面配置的動作，browser會跳過Layout，直接進行Paint；或著你捲動網頁、css的動畫效果，這類操作則會跳過style與layout，直接進行Composite。&lt;/p&gt;
&lt;p&gt;接下來我們回到Timeline這個tool。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/Timeline2.png&quot; alt=&quot;Timeline record&quot;&gt;&lt;br&gt;你可以直接在你想觀察的網頁打開Timeline，並重新整理，他就會自行錄製；或是你可以在你想觀察的操作步驟進行前（ex. 滑動頁面、打開menu bar等等）按下錄製。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/Timeline3.png&quot; alt=&quot;Timeline finish&quot;&gt;&lt;/p&gt;
&lt;p&gt;接著在你覺得適合的地方（通常就是步驟執行完後）按下Finish。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/arvinh/Timeline1.png&quot; alt=&quot;Timeline result&quot;&gt;&lt;/p&gt;
&lt;p&gt;基本上就能得到下列的Timeline結果。&lt;br&gt;從這張圖片可以清楚看到每個frame花了多少時間，在Render pipeline中發生了哪些事情，值得注意的是，圖片右上角有個紅色小三角形，若你的frame中有這個標記，就代表Chrome認為這段frame有可以改善的部分。大家不妨到自己的網頁打開Timeline，看看有多少東西需要改進XD&lt;/p&gt;
&lt;p&gt;在認識了工具後，總是要實際操作一遍才會有感受，這邊以三種角度來進行Optimization。&lt;/p&gt;
&lt;h2 id=&quot;Javascript&quot;&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h2&gt;&lt;p&gt;一般來說，前端工程師常常會利用&lt;code&gt;setTimeout&lt;/code&gt;或是&lt;code&gt;setInterval&lt;/code&gt;來製作一些動畫效果，你可能會寫下面這樣的code:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jsbin.com/xuconawipi/5/edit?html,js,output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;example setInterval&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;setInterval.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timer = &amp;#123;time: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;counter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;timer&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  timer.time = timer.time+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#counter&quot;&lt;/span&gt;).innerHTML = timer.time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setInterval(counter.bind(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,timer), &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或著是&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jsbin.com/yocokorelu/edit?html,js,output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;example setTimeout&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;setTimeout.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timer = &amp;#123;time: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;counter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;timer&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	setTimeout(counter.bind(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,timer), &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	timer.time = timer.time+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#counter&quot;&lt;/span&gt;).innerHTML = timer.time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;counter(timer);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;兩者都可以讓你達到同樣的效果，但是setTimeout跟setInterval對Browser來說都有個主要缺點，就是他&lt;strong&gt;&lt;span style=&quot;color:red; font-style: italic;&quot;&gt;想執行時就會執行，而不會依據你的Browser狀況&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;；另外當你切換到別的Tab時，setTimeout還會繼續Render。（理論上user看不到畫面，Browser就可以不用執行，以節省效能）&lt;br&gt;&lt;em&gt;&lt;span style=&quot;color:rgba(228, 85, 85, 0.81); font-style: italic;&quot;&gt;不過現在許多瀏覽器都已經利用某些方式讓setTimeout在不需要Render時暫停工作。&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;除了setTimeout與setInterval外，我們其實還有另一個選擇 &lt;span style=&quot;color:red;&quot;&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;假設我們有個Draw的動畫function，用setTimeout是這樣實作：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;draw.js	&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTimeout(draw, &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 16ms per frame!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Drawing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;draw();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;若是用requestAnimationFrame：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;draw-RAF.js	&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;draw&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Drawing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	requestAnimationFrame(draw);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;requestAnimationFrame(draw);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就這麼簡單，用了&lt;span style=&quot;color:red;&quot;&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt;&lt;/span&gt;之後，Browser就會綜合考量javascript所產生的動畫，一起刷新螢幕，並在動畫不在viewport時，暫停工作，以節省資源。&lt;/p&gt;
&lt;p&gt;當然你會想說，那如果我想控制animation的timing怎麼辦？以前面的counter例子來看，你可以這樣做：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jsbin.com/qerude/edit?html,js,output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;example reqeustAnimationFrame&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;RAF_timeer		&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timer = &amp;#123;time: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;counter&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;timer&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    requestAnimationFrame(counter.bind(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, timer));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timer.time = timer.time+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#counter&quot;&lt;/span&gt;).innerHTML = timer.time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;counter(timer);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Style-amp-Layout&quot;&gt;&lt;a href=&quot;#Style-amp-Layout&quot; class=&quot;headerlink&quot; title=&quot;Style &amp;amp; Layout&quot;&gt;&lt;/a&gt;Style &amp;amp; Layout&lt;/h2&gt;&lt;p&gt;除了JS外，在頁面上操作畫面大多免不了觸發&lt;code&gt;Style&lt;/code&gt; &amp;amp; &lt;code&gt;Layout&lt;/code&gt;這兩個Render Pipeline的步驟。既然免不了這些步驟，我們能做的就是盡量&lt;strong&gt;減少&lt;/strong&gt;這些步驟的產生，大家可以到這裡（&lt;a href=&quot;http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How (not) to trigger a layout in WebKit&lt;/a&gt;）看看在有哪些操作我們要盡量減少。&lt;/p&gt;
&lt;p&gt;當然，光說不練感受不到差別，讓我們來練習一個例子：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jsbin.com/yesika/edit?html,css,js,output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;example Layout trigger&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;befor-optimization.js&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// noprotect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sizer = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;.sizer&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;.set-size&#39;&lt;/span&gt;).addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ps = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;.article .article-block&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = ps.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; finalHeight = sizer.offsetHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ps[i].style.height = finalHeight + &lt;span class=&quot;string&quot;&gt;&#39;px&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event.preventDefault();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jsbin.com/wukuzi/2/edit?html,css,js,output&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;example Less Layout trigger&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;figcaption&gt;&lt;span&gt;after-optimization&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// noprotect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sizer = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;.sizer&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;.set-size&#39;&lt;/span&gt;).addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ps = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;.article .article-block&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = ps.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      finalHeight = sizer.offsetHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ps[i].style.height = finalHeight + &lt;span class=&quot;string&quot;&gt;&#39;px&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event.preventDefault();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;仔細看就會發現其實只有一行code有變動，效果卻差很多！當你在操作類似DOM物件的時候可以參考上述的網站，避免不必要的re-layout動作。&lt;/p&gt;
&lt;h2 id=&quot;Composite&quot;&gt;&lt;a href=&quot;#Composite&quot; class=&quot;headerlink&quot; title=&quot;Composite&quot;&gt;&lt;/a&gt;Composite&lt;/h2&gt;&lt;p&gt;在一個網頁的頁面當中，實際上並非是平面的，通常會由許多&lt;code&gt;Layer&lt;/code&gt;所組成，而在Browser rendering pipeline的最後一個步驟&lt;code&gt;Composite&lt;/code&gt;中，就是負責將這些Layer組合成完整的頁面。&lt;/p&gt;
&lt;p&gt;我們這次以最近Live直播統一獅頗為熱門的Yahoo首頁為例子，依照先前的方式打開Dev tool中的Timeline，選取其中一段frame後，點選下方的&lt;code&gt;Layers&lt;/code&gt;標籤，應該就可以看到類似下面的圖：&lt;br&gt;&lt;img src=&quot;/img/arvinh/layer.png&quot; alt=&quot;Composite Layers&quot;&gt;&lt;br&gt;&lt;img src=&quot;/img/arvinh/compositeLayers.png&quot; alt=&quot;Composite Layers (而在Timeline的工具中，旁邊還能讓你拖拉旋轉，方便查看各個Layer的狀況。)&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以發現yahoo首頁也是由許多層Layer所組成。&lt;/p&gt;
&lt;p&gt;眼尖的讀者可能會發現為什麼頁面中只有一個區塊是綠色的？這就是這小節的重點了，在Composite的過程中，只有需要重新Style與Layout的Layer才需要重繪，而這些需要重繪的Layer就會被標註成綠色；以yahoo首頁為例，綠色的那條是影音列表，理當會不斷變動，因此會被Highlight為綠色。&lt;/p&gt;
&lt;p&gt;那為什麼我們需要針對這個步驟做Optimize呢？因為假如在同一層layer中，你其實只有某一個div需要re-layout，但由於是在同一個Layer，會變成整個Layer都需要重新繪製，如此一來就會增加不必要的負擔。&lt;/p&gt;
&lt;p&gt;因此我們可以在你確定會需要重繪制的div中，加入&lt;code&gt;will-change: transform;&lt;/code&gt;這個屬性，告訴browser說，“欸~我知道我可能會變動喔，請不要把大家跟我視為一樣的”，這樣就能解決上述的問題。&lt;/p&gt;
&lt;p&gt;大家不妨打開自己的網站，利用Chrome的Timeline玩看看，提升頁面的渲染效率，讓我們一起追求60ps的極致快感吧！&lt;/p&gt;
&lt;h2 id=&quot;延伸閱讀&quot;&gt;&lt;a href=&quot;#延伸閱讀&quot; class=&quot;headerlink&quot; title=&quot;延伸閱讀&quot;&gt;&lt;/a&gt;延伸閱讀&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://gent.ilcore.com/2011/03/how-not-to-trigger-layout-in-webkit.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How not to trigger layout in webkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/?hl=en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google Web Fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/zh/tutorials/speed/layers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Accelerated Rendering in Chrome&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;http://blog.arvinh.info/about/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@arvinh&lt;/a&gt; 前端攻城獅，熱愛數據分析和資訊視覺化&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;“My name is Barry Allen, and I’m the fastest man alive …”&lt;br&gt;“Wait..reverse flash is faster then you, zoom is faster than you..”&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>人人都會的 Android Apk 反編譯</title>
    <link href="http://blog.techbridge.cc/2016/03/24/android-decompile-introduction/"/>
    <id>http://blog.techbridge.cc/2016/03/24/android-decompile-introduction/</id>
    <published>2016-03-24T15:30:00.000Z</published>
    <updated>2016-04-15T13:43:26.000Z</updated>
    
    <content type="html">&lt;p&gt;對於 Android 工程師來說，了解如何反編譯可以增進自己對 Android 底層的理解，也可以思考如何保護自己的 apk 不被反編譯。&lt;/p&gt;
&lt;p&gt;對於一般人來說，許多現成的工具可以幫助我們非常輕鬆的、只要打打幾個指令就可以反編譯 apk，看到 java source code，滿足自己的好奇心。&lt;/p&gt;
&lt;p&gt;本篇文章只介紹一些工具的使用，適合初學者觀看。若是想了解更底層的知識，可以參考文末附上的延伸閱讀。&lt;/p&gt;
&lt;h2 id=&quot;事前準備&quot;&gt;&lt;a href=&quot;#事前準備&quot; class=&quot;headerlink&quot; title=&quot;事前準備&quot;&gt;&lt;/a&gt;事前準備&lt;/h2&gt;&lt;p&gt;首先，我們需要一個用來被破解的 apk，簡單用任何你平常熟悉的工具自己 build 一個就好了。基本架構很簡單，只要一個 &lt;code&gt;MainActivity&lt;/code&gt; 跟兩個&lt;code&gt;TextView&lt;/code&gt;就好：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;MainActivity.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Activity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.activity_main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TextView text = (TextView)findViewById(R.id.text);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        text.setText(&lt;span class=&quot;string&quot;&gt;&quot;Taiwan No1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;figcaption&gt;&lt;span&gt;activity_main.xml&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;LinearLayout&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:orientation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vertical&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:text&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/hello_world&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/text&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;LinearLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安裝到手機上之後，會看到這樣的畫面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://user-image.logdown.io/user/7013/blog/6977/post/661513/uVN5gnA0QC6PEdujMIZg_device-2016-03-20-152510.png&quot; alt=&quot;device-2016-03-20-152510.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;實際動手&quot;&gt;&lt;a href=&quot;#實際動手&quot; class=&quot;headerlink&quot; title=&quot;實際動手&quot;&gt;&lt;/a&gt;實際動手&lt;/h2&gt;&lt;p&gt;好，這個就是我們要拿來測試的 apk 了！&lt;br&gt;接著你需要一些非常好用的工具：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ibotpeaches.github.io/Apktool/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;apktool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jd.benow.ca/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jd-gui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sourceforge.net/projects/dex2jar/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dex2jar&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如何安裝就不再贅述了，讀者們可以參考看看文件或是上網搜尋一下就會有一堆解答～&lt;br&gt;&lt;code&gt;apktool&lt;/code&gt;是拿來把 apk 拆開用的，可以反編譯 apk 之後，看到 &lt;code&gt;smali&lt;/code&gt; 檔案跟 &lt;code&gt;resource&lt;/code&gt;&lt;br&gt;&lt;code&gt;dex2jar&lt;/code&gt;可以把 apk 轉成 jar，再用&lt;code&gt;jd-gui&lt;/code&gt;檢視 java code&lt;/p&gt;
&lt;p&gt;接著我們開啟 terminal，到剛剛那個示範 apk 的目錄底下，執行&lt;code&gt;apktool d APKNAME.apk&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://user-image.logdown.io/user/7013/blog/6977/post/661513/Ahk6ZkFOQm7ECISEyxMI_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-20%20%E4%B8%8B%E5%8D%883.32.47.png&quot; alt=&quot;螢幕快照 2016-03-20 下午3.32.47.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;執行以後，會自動生成一個&lt;code&gt;APKNAME&lt;/code&gt;的資料夾，裡面就是反編譯出來的東西了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── AndroidManifest.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── apktool.yml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── original&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── smali&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中比較值得講的是&lt;code&gt;smali&lt;/code&gt;這個資料夾，其實這裡面就是你的 source code，只是格式不太一樣。&lt;br&gt;你可以在&lt;code&gt;smali&lt;/code&gt;這資料夾裡面找到你的&lt;code&gt;MainActivity.java&lt;/code&gt;，內容如下：&lt;br&gt;（覺得長得很奇怪是很正常的事，但是認真多看幾眼，你會發現其實沒那麼難懂）&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;&lt;span&gt;MainActivity.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.class public Lapktest/huli/com/apkdecompile/MainActivity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.super Landroid/app/Activity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.source &quot;MainActivity.java&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# direct methods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.method public constructor &amp;lt;init&amp;gt;()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .locals 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .prologue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .line 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    invoke-direct &amp;#123;p0&amp;#125;, Landroid/app/Activity;-&amp;gt;&amp;lt;init&amp;gt;()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.end method&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# virtual methods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.method protected onCreate(Landroid/os/Bundle;)V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .locals 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .param p1, &quot;savedInstanceState&quot;    # Landroid/os/Bundle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .prologue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .line 12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    invoke-super &amp;#123;p0, p1&amp;#125;, Landroid/app/Activity;-&amp;gt;onCreate(Landroid/os/Bundle;)V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .line 13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const v1, 0x7f040019&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    invoke-virtual &amp;#123;p0, v1&amp;#125;, Lapktest/huli/com/apkdecompile/MainActivity;-&amp;gt;setContentView(I)V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .line 14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const v1, 0x7f0c0050&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    invoke-virtual &amp;#123;p0, v1&amp;#125;, Lapktest/huli/com/apkdecompile/MainActivity;-&amp;gt;findViewById(I)Landroid/view/View;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    move-result-object v0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    check-cast v0, Landroid/widget/TextView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .line 15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .local v0, &quot;text&quot;:Landroid/widget/TextView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const-string v1, &quot;Taiwan No1&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    invoke-virtual &amp;#123;v0, v1&amp;#125;, Landroid/widget/TextView;-&amp;gt;setText(Ljava/lang/CharSequence;)V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .line 16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.end method&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以仔細對照一下剛剛自己寫的 java code，會發現只是換了種格式而已：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setContentView(R.layout.activity_main);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其實就等於&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.line &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; v1, &lt;span class=&quot;number&quot;&gt;0x7f040019&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;invoke-virtual &amp;#123;p0, v1&amp;#125;, Lapktest/huli/com/apkdecompile/MainActivity;-&amp;gt;setContentView(I)V&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可能會好奇，這個&lt;code&gt;0x7f040019&lt;/code&gt;是哪來的？&lt;br&gt;事實上，你可以在&lt;code&gt;res/values/public.xml&lt;/code&gt;這個檔案裡面找到答案：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;layout&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;activity_main&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0x7f040019&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到這裡，應該就可以大概猜出 Android 在編譯時候的流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把所有資源檔壓縮、處理並且包在一起，產生&lt;code&gt;id與記憶體位置對照表&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把程式碼裡面所有的&lt;code&gt;R.xx.xxx&lt;/code&gt;透過剛剛產生的表，換成實際的記憶體位置&lt;/li&gt;
&lt;li&gt;把 java code 變成 smali code（有點像把 C 變成組合語言的程式碼那樣）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;修改&quot;&gt;&lt;a href=&quot;#修改&quot; class=&quot;headerlink&quot; title=&quot;修改&quot;&gt;&lt;/a&gt;修改&lt;/h2&gt;&lt;p&gt;在剛剛的&lt;code&gt;smali&lt;/code&gt;裡面，有這麼一段：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.line &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.local v0, &lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;:Landroid/widget/TextView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;-string v1, &lt;span class=&quot;string&quot;&gt;&quot;Taiwan No1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;invoke-virtual &amp;#123;v0, v1&amp;#125;, Landroid/widget/TextView;-&amp;gt;setText(Ljava/lang/CharSequence;)V&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;讓我們把&lt;code&gt;Taiwan No1&lt;/code&gt;換成&lt;code&gt;T@iw@n n0!&lt;/code&gt;。&lt;br&gt;還記得另一個&lt;code&gt;TextView&lt;/code&gt;有用到&lt;code&gt;R.string.hello_world&lt;/code&gt;嗎？&lt;br&gt;在&lt;code&gt;res/values/strings.xml&lt;/code&gt;裡面，可以找到這一串的定義：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hello_world&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;改成：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hello_world&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;HELLO WORLD&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;確定都有改完以後，就可以把這些程式碼再度「組裝」回去。&lt;br&gt;還記得剛剛反編譯的指令嗎？&lt;code&gt;apktool d APK_NAME.apk&lt;/code&gt;&lt;br&gt;這邊的&lt;code&gt;d&lt;/code&gt;就是&lt;code&gt;decompile&lt;/code&gt;的意思，所以如果要逆向組裝回去，就是&lt;code&gt;b&lt;/code&gt;，&lt;code&gt;build&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;apktool b APK_NAME&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;執行完之後可以在&lt;code&gt;APK_NAME/dist&lt;/code&gt;下面找到一個 apk。&lt;br&gt;但要注意的是這個 apk 還沒有被 sign 過，因此無法安裝。&lt;br&gt;可以隨便生成一個 keystore 或是找現成的來簽署。&lt;br&gt;&lt;code&gt;jarsigner -verbose -digestalg SHA1 -keystore ~/KEY.keystore APK_NAME.apk KEY_ALIAS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安裝完以後就會看到這樣的畫面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://user-image.logdown.io/user/7013/blog/6977/post/661513/RNKaPElHQA2BJ02proFr_device-2016-03-20-160501.png&quot; alt=&quot;device-2016-03-20-160501.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;沒錯！就是這麼簡單，一個 apk 就這樣被修改了！&lt;/p&gt;
&lt;p&gt;可是&lt;code&gt;smali&lt;/code&gt;的程式碼不好懂，能不能直接看到 java code呢？&lt;br&gt;這時候剛剛推薦的工具&lt;code&gt;dex2jar&lt;/code&gt;與&lt;code&gt;jd-gui&lt;/code&gt;就派上用場了&lt;br&gt;前者可以把 apk 變成 jar，後者可以開啟一個 jar 並且顯示 java code&lt;br&gt;兩個組合在一起，就可以直接看到原本的程式碼了&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dex2jar&lt;/code&gt;下載下來之後會有一堆的 shell script，&lt;code&gt;dex2jar&lt;/code&gt;就是我們想要的那個&lt;br&gt;&lt;code&gt;./d2j-dex2jar.sh app.apk&lt;/code&gt;&lt;br&gt;執行完之後會有一個 jar，用 jd-gui 打開，會看到你的程式碼一覽無遺：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://user-image.logdown.io/user/7013/blog/6977/post/661513/zrnTKCQgT0OeIPbkkfp8_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202016-03-20%20%E4%B8%8B%E5%8D%884.10.15.png&quot; alt=&quot;螢幕快照 2016-03-20 下午4.10.15.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;總結&quot;&gt;&lt;a href=&quot;#總結&quot; class=&quot;headerlink&quot; title=&quot;總結&quot;&gt;&lt;/a&gt;總結&lt;/h2&gt;&lt;p&gt;沒接觸過反編譯的人可能會很驚訝：什麼！要改掉一個 apk 居然這麼簡單！&lt;br&gt;沒錯，就是這麼簡單，而且這只是一個很基本的範例而已。事實上，你想要加入新的程式碼、加入新的資源（圖片、聲音等等）也是可以的。&lt;br&gt;也就是說，你不只可以修改，還可以擴充原本的 apk！&lt;/p&gt;
&lt;p&gt;但也有些方法可以防止不肖人士反編譯 apk，例如說加殼、混淆、動態載入等，關於這些方法我們下次有機會再介紹給大家囉！&lt;/p&gt;
&lt;h2 id=&quot;延伸閱讀&quot;&gt;&lt;a href=&quot;#延伸閱讀&quot; class=&quot;headerlink&quot; title=&quot;延伸閱讀&quot;&gt;&lt;/a&gt;延伸閱讀&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://magiclen.org/android-decompiler/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 反編譯與防止被反編譯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://aiur3908.blogspot.tw/2015/07/android-proguard.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[Android] 程式碼混淆(ProGuard)與反組譯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.davidou.org/archives/553&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[Android] 反組譯 破解Android的apk安裝檔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.wangchenlong.org/2016/03/19/reverse-analyze-apk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;反编译的常用工具与使用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/wdaming1986/article/details/8299996&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Smali–Dalvik虚拟机指令语言–&amp;gt;【android_smali语法学习一】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.isming.me/2015/01/14/android-decompile-smali/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android反编译-smali语法&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;http://huli.logdown.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@huli&lt;/a&gt; 野生工程師，相信分享與交流能讓世界變得更美好&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;對於 Android 工程師來說，了解如何反編譯可以增進自己對 Android 底層的理解，也可以思考如何保護自己的 apk 不被反編譯。&lt;/p&gt;
&lt;p&gt;對於一般人來說，許多現成的工具可以幫助我們非常輕鬆的、只要打打幾個指令就可以反編譯 apk，看到 java source
    
    </summary>
    
    
      <category term="Android, Decompile, Apktool, Smali, Dex2jar, Mobile, 行動網路, 反編譯, APK" scheme="http://blog.techbridge.cc/tags/Android-Decompile-Apktool-Smali-Dex2jar-Mobile-%E8%A1%8C%E5%8B%95%E7%B6%B2%E8%B7%AF-%E5%8F%8D%E7%B7%A8%E8%AD%AF-APK/"/>
    
  </entry>
  
  <entry>
    <title>Caffe &amp; GoogLeNet，怎麼幫助機器人更好地辨識物體</title>
    <link href="http://blog.techbridge.cc/2016/03/19/ros-caffe/"/>
    <id>http://blog.techbridge.cc/2016/03/19/ros-caffe/</id>
    <published>2016-03-19T02:54:49.000Z</published>
    <updated>2016-04-15T13:43:26.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;簡介&quot;&gt;&lt;a href=&quot;#簡介&quot; class=&quot;headerlink&quot; title=&quot;簡介&quot;&gt;&lt;/a&gt;簡介&lt;/h2&gt;&lt;p&gt;這次要談的內容，是使用深度學習(Deep Learing)的模型來讓機器人做物體辨識。深度學習在這幾年來變得很火紅，相關的框架也相當多，這次之所以想談caffe，是因為已經有現成的方法可以將它應用到機器人上面。（有位台灣的開發者弄了一個叫做&lt;a href=&quot;https://github.com/tzutalin/ros_caffe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ros_caffe&lt;/a&gt;的package來串接ROS(機器人作業系統)跟Caffe，可以將Caffe辨識的結果丟到一個ROS的topic，其他的node就可以自己取用。這使得機器人辨識物體的能力得以大幅增加）&lt;/p&gt;
&lt;h2 id=&quot;一點點幫助入門的細節&quot;&gt;&lt;a href=&quot;#一點點幫助入門的細節&quot; class=&quot;headerlink&quot; title=&quot;一點點幫助入門的細節&quot;&gt;&lt;/a&gt;一點點幫助入門的細節&lt;/h2&gt;&lt;p&gt;基本的安裝方法可以參考&lt;a href=&quot;http://tzutalin.blogspot.tw/2015/06/setup-caffe.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;這個連結&lt;/a&gt;，假設已經裝成功，那至少就已經有基本的環境可以用(有一個caffe的資料夾被放在你安裝的路徑)，接下來需要下載&lt;a href=&quot;https://github.com/BVLC/caffe/tree/master/models/bvlc_googlenet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GoogLeNet的model&lt;/a&gt;，只要用caffe/scripts資料夾裡的程式幫忙就行了:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$./scripts/download_model_binary.py ./models/bvlc_googlenet&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上面這個指令會將GoogLeNet的model下載到caffe/models/bvlc_googlenet，假設已經下載好model，接下來就可以用一個小程式來跑跑看GoogLeNet了:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Make sure that caffe is on the python path:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;caffe_root = &lt;span class=&quot;string&quot;&gt;&#39;../&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# this file is expected to be in &amp;#123;caffe_root&amp;#125;/examples&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys.path.insert(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, caffe_root + &lt;span class=&quot;string&quot;&gt;&#39;python&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys.path.append(&amp;amp;quot;/usr/lib/python2&lt;span class=&quot;number&quot;&gt;.7&lt;/span&gt;/dist-packages/&amp;amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; caffe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Set the right path to your model definition file, pretrained model weights,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# and the image you would like to classify.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MODEL_FILE = &lt;span class=&quot;string&quot;&gt;&#39;../models/bvlc_googlenet/deploy.prototxt&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PRETRAINED = &lt;span class=&quot;string&quot;&gt;&#39;../models/bvlc_googlenet/bvlc_googlenet.caffemodel&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IMAGE_FILE = &lt;span class=&quot;string&quot;&gt;&#39;images/cat.jpg&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;caffe.set_mode_cpu()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net = caffe.Classifier(MODEL_FILE, PRETRAINED,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mean=np.load(caffe_root + &lt;span class=&quot;string&quot;&gt;&#39;python/caffe/imagenet/ilsvrc_2012_mean.npy&#39;&lt;/span&gt;).mean(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).mean(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channel_swap=(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;raw_scale=&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;image_dims=(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;input_image = caffe.io.load_image(IMAGE_FILE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.imshow(input_image)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prediction = net.predict([input_image])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(prediction[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;predicted class:&#39;&lt;/span&gt;, prediction[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].argmax()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下來只要執行(因為程式放在examples資料夾底下):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$python ./examples/googlenet_example.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;就可以看到一隻貓的影像，關掉影像之後就會看到貓的類別:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/pojenlai/cat_class.png&quot; alt=&quot;cat_class&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;串接ros-caffe&quot;&gt;&lt;a href=&quot;#串接ros-caffe&quot; class=&quot;headerlink&quot; title=&quot;串接ros_caffe&quot;&gt;&lt;/a&gt;串接ros_caffe&lt;/h2&gt;&lt;p&gt;如果想往下跟ros_caffe的串接可以參考&lt;a href=&quot;http://www.artificialhumancompanions.com/integrating-ros-caffe-opencv-on-the-autonomous-deep-learning-robot/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;外國鄉民的文章&lt;/a&gt;，裡面有完整而詳細的步驟。如果你已經安裝過caffe，可以參考&lt;a href=&quot;https://github.com/tzutalin/ros_caffe/issues/1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;這個issue&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;需要注意的是，外國鄉民跑的只有global的結果，也就是一張影像中只有一個最顯著的物體會被辨識，如果要辨識一張影像中的各個物體，可能就要自己在中間串接一個負責做segmentation的node，再把各個切出來的區塊餵給ros_caffe來做辨識。&lt;/p&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;https://pojenlai.wordpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@pojenlai&lt;/a&gt; 演算法工程師，對機器人跟電腦視覺有少許研究，最近在鍛鍊自己的執行力&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;簡介&quot;&gt;&lt;a href=&quot;#簡介&quot; class=&quot;headerlink&quot; title=&quot;簡介&quot;&gt;&lt;/a&gt;簡介&lt;/h2&gt;&lt;p&gt;這次要談的內容，是使用深度學習(Deep Learing)的模型來讓機器人做物體辨識。深度學習在這幾年來變得很火紅，相關的框架也相當多，這次
    
    </summary>
    
    
      <category term="機器人, 深度學習, Deep Learing, Robot, GoogLeNet, Caffe" scheme="http://blog.techbridge.cc/tags/%E6%A9%9F%E5%99%A8%E4%BA%BA-%E6%B7%B1%E5%BA%A6%E5%AD%B8%E7%BF%92-Deep-Learing-Robot-GoogLeNet-Caffe/"/>
    
  </entry>
  
  <entry>
    <title>如何打造更好的科技新創 (Startup) 工作環境和組織文化？</title>
    <link href="http://blog.techbridge.cc/2016/03/19/how-to-build-a-great-startup-culture/"/>
    <id>http://blog.techbridge.cc/2016/03/19/how-to-build-a-great-startup-culture/</id>
    <published>2016-03-19T01:54:49.000Z</published>
    <updated>2016-06-08T12:25:42.000Z</updated>
    
    <content type="html">&lt;p&gt;最近剛好在&lt;a href=&quot;http://www.zhihu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;上看到一篇&lt;a href=&quot;http://daily.zhihu.com/story/4264615&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;矽谷新創公司文化和工作環境的文章&lt;/a&gt; (內容主要還是以網路或科技新創公司為主)。這些公司雖然業務內容大不相同但還是有一些共通性。根據自己的經驗做一下翻譯和補充，期待未來台灣也能有更多世界一流的科技新創公司，提供人才更好的舞台和工作環境，大家一起加油啦！&lt;/p&gt;
&lt;p&gt;第 0 步：找到對的人上車 (確保每位加入成員都能理解並認同公司價值觀和願景。打造優良的組織文化並不容易，但崩解可能只是一夕之間。最初 Airbnb 找第一號員工就花了約半年的時間！)&lt;/p&gt;
&lt;p&gt;參考文件：&lt;a href=&quot;http://36kr.com/p/216739.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Airbnb創辦人Brian Chesky談企業文化&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;開放式辦公室，直接溝通，少開會。代碼勝於雄辯 (Code wins arguments.)&lt;/li&gt;
&lt;li&gt;免費食物，提供工作餐點，也可以說故意延長工作時間 :P&lt;/li&gt;
&lt;li&gt;使用蘋果電腦 (Mac) 或 Linux， 以及使用 Linux 的雲端伺服器 (Cloud Server)&lt;/li&gt;
&lt;li&gt;擁抱開源軟體 (Open Source)，利用各種可用工具，注意力集中在核心產品&lt;/li&gt;
&lt;li&gt;快速迭代 (Iterate)，A / B Testing，數據驅動思考 (Data Driven Thinking)&lt;/li&gt;
&lt;li&gt;注重使用者體驗 (User Experience)，使用者利益大於獲利考慮&lt;/li&gt;
&lt;li&gt;簡約設計，注重 MVP (最小可行) 的產品，敏捷開發&lt;/li&gt;
&lt;li&gt;工程師文化，不惜代價找到最合適的人才，常舉辦內部 Hack Day。技術分享風氣濃厚，熱於學習新技術&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;事實上，以上幾點科技新創 (Startup) 的常見文化和工作環境未必合適於每個組織中。能找到合適的夥伴加入團隊，一起打造適合的文化和價值觀才是關鍵。&lt;/p&gt;
&lt;p&gt;參考文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.littlelin.info/posts/2014/05/04/what-makes-good-engineering-culture-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[翻譯] 是什麼造就了好的軟體工程文化？(上)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.littlelin.info/posts/2014/09/21/what-makes-good-engineering-culture-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[翻譯] 是什麼造就了好的軟體工程文化？(下)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;關於作者：&lt;br&gt;&lt;a href=&quot;http://blog.kdchang.cc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kdchang&lt;/a&gt; 文藝型開發者，夢想是做出人們想用的產品和辦一所心目中理想的學校，目前專注在 Mobile 和 IoT 應用開發。A Starter &amp;amp; Maker. JavaScript, Python &amp;amp; iOS/Android lover. Keep Shipping Cool Mobile/IoT App &amp;amp; Web App.:)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近剛好在&lt;a href=&quot;http://www.zhihu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎&lt;/a&gt;上看到一篇&lt;a href=&quot;http://daily.zhihu.com/story/4264615&quot; target=&quot;_bl
    
    </summary>
    
    
      <category term="創新創業, 創業, 新創公司, Code wins arguments, Hack Day, Linux, Mac, Open Source, Startup, User Experience" scheme="http://blog.techbridge.cc/tags/%E5%89%B5%E6%96%B0%E5%89%B5%E6%A5%AD-%E5%89%B5%E6%A5%AD-%E6%96%B0%E5%89%B5%E5%85%AC%E5%8F%B8-Code-wins-arguments-Hack-Day-Linux-Mac-Open-Source-Startup-User-Experience/"/>
    
  </entry>
  
  <entry>
    <title>關於這個技術共筆部落格</title>
    <link href="http://blog.techbridge.cc/2016/03/19/about/"/>
    <id>http://blog.techbridge.cc/2016/03/19/about/</id>
    <published>2016-03-18T22:54:49.000Z</published>
    <updated>2016-05-14T03:01:44.000Z</updated>
    
    <content type="html">&lt;p&gt;TechBridge Weekly 技術週刊團隊是一群對用技術改變世界懷抱熱情的團隊。本技術共筆部落格初期專注於Web前後端、行動網路、機器人/物聯網、數據分析與產品設計等正體中文技術原創文章或國外好文翻譯分享。This is TechBridge Weekly Team Tech Blog, which focus on web, mobile, robot, IoT, data analytics technology sharing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技術日報：&lt;a href=&quot;http://www.techbridge.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.techbridge.cc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;技術週刊：&lt;a href=&quot;http://weekly.techbridge.cc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://weekly.techbridge.cc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;技術共筆部落格：&lt;a href=&quot;http://blog.techbridge.cc/&quot;&gt;http://blog.techbridge.cc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;粉絲專頁：&lt;a href=&quot;https://www.facebook.com/TechBridge.Fans/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.facebook.com/TechBridge.Fans/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;電子郵件：&lt;a href=&quot;mailto:techbridge.cc@gmail.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;techbridge.cc@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;目前負責的-Curator（歡迎有興趣朋友跳坑加入策展人團隊-P）&quot;&gt;&lt;a href=&quot;#目前負責的-Curator（歡迎有興趣朋友跳坑加入策展人團隊-P）&quot; class=&quot;headerlink&quot; title=&quot;目前負責的 Curator（歡迎有興趣朋友跳坑加入策展人團隊:P）&quot;&gt;&lt;/a&gt;目前負責的 Curator（歡迎有興趣朋友跳坑加入策展人團隊:P）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.kdchang.cc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@kdchang&lt;/a&gt; 文藝型開發者，夢想是做出人們想用的產品和辦一所心目中理想的學校&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.arvinh.info/about/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@arvinh&lt;/a&gt; 前端攻城獅，熱愛數據分析和資訊視覺化&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://huli.logdown.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@huli&lt;/a&gt; 野生工程師，相信分享與交流能讓世界變得更美好&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pojenlai.wordpress.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@pojenlai&lt;/a&gt; 演算法工程師，對機器人跟電腦視覺有少許研究，最近在鍛鍊自己的執行力&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;TechBridge Weekly 技術週刊團隊是一群對用技術改變世界懷抱熱情的團隊。本技術共筆部落格初期專注於Web前後端、行動網路、機器人/物聯網、數據分析與產品設計等正體中文技術原創文章或國外好文翻譯分享。This is TechBridge Weekly Team 
    
    </summary>
    
    
      <category term="IoT, Mobile, Web, Startup, Data, Robot, Maker, UI/UX, Product" scheme="http://blog.techbridge.cc/tags/IoT-Mobile-Web-Startup-Data-Robot-Maker-UI-UX-Product/"/>
    
  </entry>
  
</feed>
